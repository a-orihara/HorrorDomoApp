name: Run Jest
# on:イベント。ワークフローを実行するイベントを指定

on:
  push:
    branches-ignore:
      - "main"
    workflow_call:

# ジョブ。一つのjob内の全てのstepは同じVM内で実行される。
jobs:
  jest:
    name: Jest
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: frontend/front
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        # 1
        uses: actions/setup-node@v3
        with:
          node-version: "16.17.1"
          # 2
          cache-dependency-path: "frontend/front/package.json" # ファイルのパスを指定

      - name: Install dependencies
        run: npm install

      - name: Run Jest
        run: npm run test

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    defaults:
      run:
        working-directory: frontend/front
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.17.1"
          cache-dependency-path: "frontend/front/package.json"

      - name: Install dependencies
        run: npm install

      - name: Format
        # 3
        run: npm run format

      - name: lint
        # 4
        run: npm run lint
# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# . `uses: actions/setup-node@v3`
# - このアクションは、ワークフロー内でNode.jsをセットアップするために使用されます。
# - JavaScriptプロジェクトには、特定のNode.jsのバージョンが必要な場合があります。このアクションは、ジョブが実行さ
# れる仮想マシン（VM）に指定されたバージョンのNode.jsをインストールしてセットアップします。

# ================================================================================================
# 2
# .`cache-dependency-path: "frontend/front/package.json"`
# - `cache-dependency-path`: 依存関係のキャッシュのために依存関係ファイル（ここでは`package.json`）のパスを指
# 定します。
# - 依存関係のキャッシュを効率的に行い、ビルド時間を短縮します。
# - ファイルにリストされた依存関係（npm パッケージ）をキャッシュします（存在する場合）。
# - キャッシュが存在する場合、次回のビルドでは依存関係のインストールが高速になります。
# ------------------------------------------------------------------------------------------------
# - Node.jsプロジェクトの`package.json`ファイルは、プロジェクトのコンフィギュレーションの中心的な役割を果たしま
# す。このファイルには、プロジェクトの実行とビルドに必要なすべての依存関係（ライブラリ、フレームワーク、ツール）がリ
# ストされている。cache-dependency-path： "frontend/front/package.json"` を指定すると、GitHub Actions
# にプロジェクトの依存関係をキャッシュするための参照として `package.json` ファイルを使うように指示する。

# ================================================================================================
# 3
# - npm run format`:** このコマンドは通常、コードフォーマッタを呼び出して、事前に定義されたスタイルガイドライン
# に従ってソースコードファイルを自動的にフォーマットします。その目的は、コードが一貫したスタイルに従うようにし、読み
# やすく保守しやすくすることです。

# ================================================================================================
# 4
# - npm run lint`:** 一方、このコマンドはESLintのようなリンターツールを実行し、潜在的なエラーやバグ、スタイル上
# の問題、ベストプラクティスの遵守についてコードを分析します。リンティングは、バグにつながる可能性のある問題や、コー
# ドの保守を困難にする可能性のある問題を、コードが実行されたりコミットされたりする前に特定するのに役立ちます。書式設
# 定とは異なり、リンティングは外観だけでなくコードの品質に関する洞察を提供する。



