// 1 Docker環境でのデバッグは、リモート環境でのデバッグと同様の考え方で行う
// Docker環境内でのデバッグを想定しているため、ローカルマシンとDockerコンテナ間でのマッピング設定が必要
{
  // "configurations": デバッグの設定情報を配列として記述します。
  "configurations": [
    // jestのデバックの設定
    {
      "type": "node",
      "name": "vscode-jest-tests.v2",
      "request": "launch",
      "args": [
        "test",
        "--runInBand",
        "--watchAll=false",
        "--testNamePattern",
        "${jest.testNamePattern}",
        "--runTestsByPath",
        "${jest.testFile}"
      ],
      "cwd": "/Users/k.orihara/portfolio/HorrorDomoApp/frontend/front",
      "console": "integratedTerminal",
      "internalConsoleOptions": "neverOpen",
      "disableOptimisticBPs": true,
      "runtimeExecutable": "yarn"
    },
    // next.jsのserver-sideのdebug設定
    {
      "name": "Next.js: debug server-side",
      // デバッグ対象のタイプをNode.jsのターミナルモードに設定
      // 3
      "type": "node",
      // 4
      "request": "attach",
      // 5
      "port": 9229,
      // 6
      "address": "localhost",
      "localRoot": "${workspaceFolder}",
      "remoteRoot": "/myapp"
      // デバッグ時に実行されるコマンドを指定
      // "command": "npm run dev"
    },
    // next.jsのclient-sideのdebug設定
    {
      "name": "Next.js: debug client-side",
      // デバッグ対象のタイプをGoogle Chromeに設定
      "type": "chrome",
      "request": "launch",
      // デバッグ対象のURLを指定
      "url": "http://localhost:3001",
      // 2
      "webRoot": "${workspaceFolder}", //追加
      "sourceMapPathOverrides": {
        //追加
        "webpack://_N_E/*": "${workspaceFolder}/*"
      }
    },
    // next.jsのserver-side,client-side両方のdebug設定
    {
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev",
      // サーバーの起動を待ち、準備ができたらアクションを実行する設定
      "serverReadyAction": {
        "pattern": "started server on .+, url: (https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}
/*
@          @@          @@          @@          @@          @@          @@          @@          @
.launch.json
デバッグ設定ファイルで、どのようにデバッグセッションを開始するかを定義します。ここには実行するコマンドや引数などが設
定されます。主にデバッガの挙動を制御します。
------------------------------------------------------------------------------------------------
.vscode/launch.jsonと.vscode/tasks.jsonの役割の違い:
.vscode/launch.json: デバッグを開始する際の具体的な動作を定義し、デバッガとプログラムの連携を担当します。
.vscode/tasks.json: 一連のタスクを自動化し、ビルドプロセスやテストの実行など、開発の流れをスムーズにする役割を果
たします。

================================================================================================
2
client-side
. `"webRoot": "${workspaceFolder}"`
**(VSCode上でDockerのNext.jsをデバッグする際に必要)
- `"webRoot"`プロパティは、ブラウザでのURLから実際のファイルシステム上のパスへのマッピングを提供するパラメータで
す。サーバー上でホストされる（設置される）Webファイル（アプリ）のルートディレクトリを指定します。
- デバッグ時にブレークポイントを正しく解釈するため、ソースコードのURLとローカルファイルシステムのパスの対応関係を知
る必要があります。webRootはこの対応関係を指定します。
- `"${workspaceFolder}"`は、${workspaceFolder}はVSCodeの変数で、現在開いているワークスペースまたはプロジェ
クトのルートフォルダの絶対パスを表します。
------------------------------------------------------------------------------------------------
- このプロパティを設定することで、VSCodeはブラウザとソースコードの間で正しいマッピングを確立し、デバッガが正しく動
作するようにします。
*マッピング : ソースコードと実行コードの対応関係。デバッグ中にトランスパイルされたコード（通常はJavaScript）とオ
リジナルのソースコード（通常はTypeScriptや他の高水準の言語）との対応を確立することを指します。ソースコードとトラン
スパイルされたコードは構文や行番号が異なるため、デバッガが正しい行番号や変数名を表示するためには、これらのコード間の
マッピングが必要です。
------------------------------------------------------------------------------------------------
- このプロパティが欠落していると、VSCodeが正しいソースファイルへの参照を見つけることができない可能性があるため、デ
バッグが困難になる場合があります。
================================================================================================
. `"sourceMapPathOverrides": {"webpack://_N_E/*": "${workspaceFolder}/*"}`
**(VSCode上でDockerのNext.jsをデバッグする際に必要)
- ソースマップは、トランスパイルされたコードとオリジナルのソースコードの間のマッピングを提供します。このプロパティは
特定のソースマップパスのオーバーライドを設定します。`"webpack://_N_E/*"`はWebpackが生成するソースマップのパスで
、`${workspaceFolder}/*`にマッピングされます。
- Next.jsはWebpackを使用するため、このプロパティはVSCodeが正しいソースコードファイルを見つけるために必要なマッピ
ングを提供します。これにより、デバッグ中に正しい行とファイルにブレークポイントを設定できます。
- このオーバーライドがない場合、トランスパイルされたコードとオリジナルのソースコードの間のマッピングが正しくない可能
性があり、デバッグが困難になる場合があります。特に、TypeScriptなどのトランスパイラーを使用している場合にこの問題が
発生することがよくあります。
------------------------------------------------------------------------------------------------
server-side
3
. "type": "node"
- `"type": "node"`は、デバッグの対象がNode.jsであることを指定します。Next.jsはNode.js上で動作するので、サー
バーサイドのデバッグにはこの設定が必要です。
- `"type": "node"`は、Node.jsのデバッグを直接行います。`"type": "node-terminal"`は、ターミナルを通して、
Node.jsをデバッグします。ターミナル内で実行されるコマンドをデバッグする際に使用します。Dockerコンテナ上のNode.js
を直接デバッグしているため、`"type": "node"`が適しています。
================================================================================================
4
. "request": "attach"
- `"request": "attach"`は、既存の実行中のプロセスへのデバッグセッションの接続を意味します。
- Docker内で既に実行中のNext.jsサーバーに接続するために、この設定が使用されています。
. "request": "attach"、"request": "launch"の違い
- `"request": "attach"`は既存のプロセスに接続するために使用され、"`request": "launch"`は新しいプロセスを開
始してデバッグするために使用されます。
- Docker内で実行される既存のNext.jsプロセスに接続する必要があるため、"attach"が適しています。
================================================================================================
5
"port"
デバッグするNode.jsプロセスがリッスンしているポート番号を指定します。DockerのNext.jsがこのポートでデバッグ情報を
待ち受けるために必要です。
================================================================================================
6
"address"
接続先のアドレスを指定します。ローカルマシン上のDockerコンテナに接続するため、localhostを指定しています。
================================================================================================
7
"localRoot"
VSCodeのワークスペースフォルダのパス（"${workspaceFolder}" ）を指定します。この設定はローカルのソースコードと、
Dockerコンテナ内のソースコードのマッピングに使用されるため、DockerのNext.jsをデバッグするために必要です。
================================================================================================
8
"remoteRoot"
Dockerコンテナ内のアプリケーションのルートディレクトリのパスを指定します。localRootと組み合わせて、ローカルとリモ
ートのソースコードのマッピングを行うために必要です。
*/
