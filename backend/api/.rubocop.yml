# 1

# 2
# inherit_from: .rubocop_todo.yml

# Copの自体の設定を編集する場合は以下のように記述します。
# [Cop名]:
#   [オプション名]: [値]

# 3
# 追加した規約ファイル読込
require:
  # 入れた方がいい機能
  - rubocop-performance
  # Railsに関わる構文規則チェック
  - rubocop-rails
  # Rspecに関わる構文規則チェック
  - rubocop-rspec

# AllCopsオプション:全てのCopsを対象にした設定。
# 設定はこちらを参照:https://blog.to-ko-s.com/rubocop-setting/#i-6
AllCops:
  # NewCops: enableを追加することで、RuboCopのバージョンがあがった際に追加されたCopを自動で有効にする。
  # NewCops: enableの設定は任意ですが、新たなCopに追従していくために特に理由がなければ有効にするとよい。
  NewCops: enable
  # Rubyバージョン指定
  TargetRubyVersion: 3.1.2
  # rubocopによって解析をしないディレクトリやファイルを指定。現実的じゃないコーディング規約を除外。
  Exclude:
    - "config.ru"
    - "bin/**"
    - "lib/**"
    - "log/**/*"
    - "tmp/**/*"
    - "db/**/*"
    - "config/**/*"
    - "script/**/*"
    - !ruby/regexp /old_and_unused\.rb$/
    - "vendor/**/*" # rubocop config/default.yml
    - "node_modules/**/*"
    - "Gemfile"
    - "config/environments/*"
    - "config/puma.rb"
    - "lib/tasks/auto_annotate_models.rake"

# 恒久対応としてCopを無効にする設定は以下の通りです。
# [Cop名]:
#   Enabled: false

# 関連の外部キーに対して不要な存在性のバリデーションが設定されている場合に警告を表示する
# *学習用に一旦falseにする
Rails/RedundantPresenceValidationOnBelongsTo:
  Enabled: false

# 設定が厳しいので一旦全てfalseにする
Metrics:
  Enabled: false

# 日本語でのコメントを許可
Style/AsciiComments:
  Enabled: false

# クラスのコメント必須を無視
Style/Documentation:
  Enabled: false

# モジュール名::クラス名の定義を許可(コントローラ等のモジュールをネストしての宣言)
Style/ClassAndModuleChildren:
  Enabled: false

# 文字リテラルのイミュータブル宣言を無視（freezeになるのはRuby3以降）
Style/FrozenStringLiteralComment:
  Enabled: false

# ガード節の提案（難しいので一旦false）
Style/GuardClause:
  Enabled: false

# !! のイディオムを許可
Style/DoubleNegation:
  Enabled: false

# 普通の文字列はシングルクォーテーションを使用する（文字列のダブルクォートチェック）という規約。
Style/StringLiterals:
  Enabled: false

# シンボルによる配列の%記法のチェック
Style/SymbolArray:
  Enabled: false
  # EnforcedStyle: brackets

# 文字列による配列の%記法のチェック
Style/WordArray:
  Enabled: false

# 変数名に数字を許可
Naming/VariableNumber:
  Enabled: false

# メソッド名等の命名の指摘
Naming/PredicateName:
  Enabled: false

# [=begin =end]のブロックコメントの使用
Style/BlockComments:
  Enabled: false

# インデントの警告を無視する設定
Layout/IndentationWidth:
  Enabled: false

# コードのインデントの一貫性をチェックする
Layout/IndentationConsistency:
  Enabled: false

# コメントのインデントが誤っていることを示す警告
Layout/CommentIndentation:
  Enabled: false

# クラス内で明示的に定義されていないアクションがbefore_actionで指定されている場合に警告を表示する
# devise使用で設定が合わないため、一旦オフにする
LexicallyScopedActionFilter:
  Enabled: false

# HTTPステータスコードを指定する際に:okを使うことを推奨する警告
Rails/HttpStatus:
  Enabled: false

# 空のテスト例を検出する警告
RSpec/EmptyExampleGroup:
  Enabled: false

# HTTPステータスコードを表現するためにシンボル :ok を使用することを推奨する警告
RSpec/Rails/HttpStatus:
  Enabled: false

# 1つのテストケース（itブロック）に1つの期待値（expect）のみを持つべきであるという警告
RSpec/MultipleExpectations:
  Enabled: false

# RSpecのdescribeやcontextブロックのネストの深さを制限する警告
RSpec/NestedGroups:
  Max: 4

# RSpecのコードで特定のマッチャーの使用方法に関する警告
RSpec/PredicateMatcher:
  Enabled: false

# テストグループ内で多くのメモ化されたヘルパー（letやsubject）が使われていることを指摘（デフォルトの閾値は5）
RSpec/MultipleMemoizedHelpers:
  Enabled: false

# ハッシュリテラルの書式に関するスタイルをチェックする
# 紛らわしいので一旦オフにする
Style/HashSyntax:
  Enabled: false

# ハッシュ{の前後にスペースが入ってない
# good:e.g:
# h = { a: 1, b: 2 }
# Layout/SpaceInsideHashLiteralBraces:
#   Enabled: false

# = = 下記三つのcopは、rspecのデフォルトの初期設定に反応した為、一旦無効にする。= =
# 冗長なスペックタイプを特定する。
RSpec/Rails/InferredSpecType:
  Enabled: false

# Rspecの行数制限
RSpec/ExampleLength:
  Max: 7

# このコピーは、ファイルパスの結合処理で `Rails.root.join` 節を使用する用途を識別するために使用されます。
# これは、パスを結合する際に統一性を持たせるために使用されます。
Rails/FilePath:
  Enabled: false

Style/RedundantConstantBase:
  Enabled: false

# 検証用のStaticPagesControllerのエラー回避の為
Rails/ApplicationController:
  Enabled: false

# 1行あたりの文字数をチェックする
Layout/LineLength:
  Max: 150
  # 下記ファイルはチェックの対象から外す
  Exclude:
    - "Rakefile"
    - "spec/rails_helper.rb"
    - "spec/spec_helper.rb"

# メソッドの改行ルール
Layout/MultilineMethodCallIndentation:
  EnforcedStyle: indented

# 空メソッドの場合に、1行のスタイルにしない:NG例：def style1; end
Style/EmptyMethod:
  EnforcedStyle: expanded

# contextやdescribeに指定する文字列が when, with, without のいずれかで始まっているか
RSpec/ContextWording:
  Enabled: false

# 下記はchatGPTのおすすめの設定
Style/BlockDelimiters:
  Enabled: false

Layout/EmptyLinesAroundClassBody:
  Enabled: false
Layout/EmptyLinesAroundModuleBody:
  Enabled: false
Layout/EmptyLinesAroundMethodBody:
  Enabled: false
Lint/RedundantDirGlobSort:
  Enabled: false
# @          @@          @@          @@          @@          @@          @@          @
# 1
# [.rubocop.yml]:独自のコーディング規約を設定するファイル。
# RuboCop自身に関する設定だけでなく、Copの有効無効の制御や、Copのカスタマイズをする際にも利用します。

# =          ==          ==          ==          ==          ==          ==          =
# 2
# `inherit_from` オプションと `.rubocop_todo.yml` ファイルの役割について
# ------------------------------------------------------------------------------------------------
# . **`inherit_from` オプションの説明**:
# - `inherit_from` は、RuboCopの設定ファイル（通常は `.rubocop.yml`）内で使用されるオプションです。
# - このオプションを使うことで、他のファイル（例えば `.rubocop_todo.yml`）の設定を現在の設定ファイルに継承させる
# ことができます。
# - これにより、複数の設定ファイルを分割して管理することが可能になり、設定の可読性や保守性が向上します。
# ------------------------------------------------------------------------------------------------
# . **`.rubocop_todo.yml` ファイルの役割**:
# - `.rubocop_todo.yml` は、RuboCopによって検出された問題点を一時的に無視するためのファイルです。
# - このファイルには、プロジェクトのコードベースで現在満たされていないコーディングスタイルやガイドラインに関する規則
# が含まれています。
# - `rubocop --auto-gen-config` コマンドを実行すると、RuboCopは現在のコードベースに適用できない規則を
# `.rubocop_todo.yml` に自動的に追加します。
# - このファイルを `.rubocop.yml` から継承することで、これらの規則違反を一時的に無視し、開発チームがより重要な問題
# に集中できるようになります。
# ------------------------------------------------------------------------------------------------
# . **コメントアウトして使用する意図**:
# - `inherit_from: .rubocop_todo.yml`をコメントアウトすることで、`.rubocop_todo.yml`の設定を一時的に無効化
# します。
# - この行をコメントアウトする理由は、通常、コードベースに存在するすべてのスタイル違反を明確にするためです。これによ
# り、開発者はコード内の違反すべてに対処する必要があり、コードの品質向上に役立ちます。
# - また、新しいプロジェクトを開始する際や、コーディング規約を厳格に適用したい場合に、`.rubocop_todo.yml`の設定を
# 無視して、すべてのRuboCopの警告やエラーに直面することがあります。これにより、コードをより厳格に整理し、規約に準拠
# することができます。

# =          ==          ==          ==          ==          ==          ==          =
# 3
# rubocop：生Rubyに関わる構文規則チェック
# rubocop-rails：Railsに関わる構文規則チェック
# rubocop-performance：パフォーマンスに関わる構文規則チェック
# バージョン0.71以前では、全部入りだったため、RuboCop関連の記事を読むときは、
# バージョン0.71以前なのか、0.72以降のものなのかを注意
# RuboCopのバージョンが0.72以降は「Rails Cops」が使えなくなりました。
# RuboCopのバージョンが0.72以降の場合は、rubocop-railsをgemでインストールし、.rubocop.ymlに
# require: rubocop-railsを追記してください。

# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
# -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -   -
