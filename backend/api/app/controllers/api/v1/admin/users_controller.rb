class Api::V1::Admin::UsersController < ApplicationController
  # サインイン済みで、adminユーザーのみdestroyできる
  before_action :authenticate_api_v1_user!, :set_user, :admin_user, only: :destroy

  # 1
  def destroy
    puts "destroyアクションが発火"
    @user.destroy
    # res.data.status = 'success' となる
    render json: { status: 'success', message: 'ユーザーが削除されました。' }
  end

  private

    # Userモデルからidに対応するユーザーを検索し、変数userに代入する。
    def set_user
      @user = User.find(params[:id])
      unless @user
        render json: {
          status: 'error',
          message: 'ユーザーが見つかりません。'
        }
      end
    end

    # 2
    def admin_user
      unless current_api_v1_user&.admin?
        render json: {
          status: 'error',
          message: 'この操作は、管理者のみ行うことができます。'
          # 403 Forbidden
        }, status: :forbidden
      end
    end
end

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
1
DeviseTokenAuth::RegistrationsController の destroy アクションは、元々ログインユーザー自身を削除するため
のアクションです。一般的な RESTful デザイン原則には合致しておらず、管理者が他のユーザーを削除するアクションに変更
することは推奨されません。
一般的な RESTful デザインでは、管理者が他のユーザーを削除する場合には別のエンドポイントやコントローラーを設計する
ことが一般的です。
このような設計は、セキュリティとデータ整合性の観点からも重要です。他のユーザーを削除するアクションは慎重に制御され
る必要があり、適切な認証と認可の仕組みが必要です。

================================================================================================
2
admin?
current_api_v1_user オブジェクトの admin? メソッドを呼び出している。このメソッドは、current_api_v1_user オ
ブジェクトが管理者であるかどうかを判定するために使用される。
admin 属性を User モデルに 追加すると、自動的に admin?メソッド(論理値を返す)も使えるようになる。

------------------------------------------------------------------------------------------------
current_api_v1_user
Devise Token Auth のヘルパーメソッド。現在のユーザーオブジェクトを返す。

------------------------------------------------------------------------------------------------
&.（ぼっち演算子）
Rubyの演算子の一つ、セーフナビゲーション演算子。オブジェクトの「メソッド呼び出し」を安全に行うためのものです。
オブジェクト&.メソッドの形式で使用します。
オブジェクトが nil の場合、メソッド呼び出しの結果は 、エラーにならず、nil になります。エラーになりません。オブジェ
クトが nil でない場合は、通常のメソッド呼び出しと同じ結果が得られます。
オブジェクトが存在しない可能性がある場合や、メソッド呼び出し時にエラーを回避したい場合に便利な演算子です。特にオブ
ジェクトのチェーンやネストしたメソッド呼び出しで使用すると、より安全なコードを記述することができます。
current_api_v1_user&.admin?

------------------------------------------------------------------------------------------------
unless current_api_v1_user&.admin?
current_api_v1_user が存在し、かつ admin? メソッドが呼び出せる場合に条件を満たす。
つまり、現在のユーザーが存在し、かつ管理者でない場合に条件が成立します。エラーレスポンスを返します。
管理者以外のユーザーが特定のアクションを実行しようとした場合にエラーメッセージを返すための制御フローです。

------------------------------------------------------------------------------------------------
もし、unless current_api_v1_user.admin?だと、admin属性を正しくチェックしているように見えますが、
current_api_v1_userがnil（ログインしていない状態）の場合にエラーが発生します。そのため、
current_api_v1_user&.admin?として安全な参照を行います。

================================================================================================
3
403 Forbiddenは、HTTPプロトコルのレスポンスステータスコードの一つであり、サーバーがリクエストされたリソースへのア
クセスを拒否していることを示します。このステータスコードは、クライアントが認証されている場合でも、特定のリソースへの
アクセス権限がない場合に使用されます。

=end
