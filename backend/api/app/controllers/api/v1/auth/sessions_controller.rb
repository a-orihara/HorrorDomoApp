class Api::V1::Auth::SessionsController < DeviseTokenAuth::RegistrationsController
  # 1 ログイン済みのユーザーが存在するかをチェックする
  def index
    # 現在のログインユーザーを返す。ログインしていない場合は、nilを返す。
    if current_api_v1_user
      render json: { is_login: true, data: current_api_v1_user }
    else
      render json: { is_login: false, message: "ユーザーが存在しません" }
    end
  end
end

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
1
一般にこのメソッドの返り値は、
id: ユーザーのID
provider: 認証プロバイダーの種類（例えば、"email"や"facebook"など）
uid: ユーザーの識別子（例えば、メールアドレスやSNSのアカウント名など）
name: ユーザーの名前
email: ユーザーのメールアドレス
created_at: ユーザーのアカウント作成日時
updated_at: ユーザー情報の最終更新日時

------------------------------------------------------------------------------------------------
上記のコードは、ログイン済みのユーザーの存在をチェックして、ユーザーが存在する場合はログイン状態であることを示す
JSONレスポンスを返し、存在しない場合はログイン状態でないことを示すJSONレスポンスを返しています。
このコードの利用目的は、現在のログイン状態を確認し、必要に応じて処理を実行することです。この場合、ログイン状態を
チェックして、フロントエンド側でログイン・非ログインに応じた表示をするために利用されます。
このようなログイン状態のチェック処理は、一般的によく見られる設定です。ログインしているかどうかによって、表示内容
を切り替えたり、権限に基づいた処理を制御したりすることができます。また、ログイン状態を保持するために、セッション
やトークンなどの技術を利用する場合があります。

------------------------------------------------------------------------------------------------
「ヘルパーメソッド」とは、Railsアプリケーション内で再利用可能な小さなメソッドのことであり、アプリケーションのビジ
ネスロジックを記述するコントローラーからビューに渡す値を整形する、フォーマットする、あるいはテキストを処理するなど
、さまざまな用途に使われます。
current_api_v1_userというヘルパーメソッドは、devise_token_auth gemによって提供されるものであり、現在ログイ
ンしているユーザーを取得するために使用されます。このコードは、ユーザーがログインしている場合には、そのユーザーの情
報を含むJSONレスポンスを返し、ログインしていない場合にはエラーメッセージを含むJSONレスポンスを返します。
devise_token_auth gemを使用する場合、current_api_v1_userというヘルパーメソッドは一般的によく見られます。た
だし、アプリケーションによっては異なるヘルパーメソッドを定義して使用することもあります。

------------------------------------------------------------------------------------------------
Devise Token Authには、ログイン済みのユーザー情報を取得するための専用のコントローラーやメソッドが用意されていま
す。しかし、デフォルトの設定では、ログイン状態を管理するためのセッション情報がCookieではなくヘッダーに含まれてお
り、そのセッション情報を解釈して現在のユーザー情報を取得する必要があるため、Sessionsコントローラーを自作すること
が多いです。また、自作することで、カスタマイズされたレスポンスを返すことができるため、便利な場合もあります。ただし
、Devise Token Authには専用のコントローラーやメソッドが用意されているため、自作しなくてもログイン済みのユーザー
情報を取得することはできます。

------------------------------------------------------------------------------------------------
Devise Token Authは、ユーザー認証情報をCookieではなくヘッダーに含めることで、APIなどのクライアントからのリクエ
ストに対応しやすくなっています。このため、Devise Token Authではセッション情報をCookieに保存せず、認証情報をヘッ
ダーに格納することで、ユーザーの認証状態を管理しています。

具体的には、Devise Token Authでは、認証情報を含む6つの情報をヘッダーに格納しています。これらの情報は、以下の通り
です。
access-token
client
expiry
uid
token-type
authorization
このうち、access-token、client、expiry、uidは、Devise Token Authが認証に使用する情報であり、ユーザーの認証
状態を管理するために必要な情報です。一方、token-type、authorizationは、OAuth2認証プロトコルに則って付与される
情報であり、Devise Token Authの実装上は必須ではありません。

Devise Token Authで認証情報を管理するための具体的な処理は、以下のようになります。
ログイン時に、アクセストークンを発行し、uid、client、expiryなどの情報とともにヘッダーに含める。
リクエストが送信されるたびに、ヘッダーからuid、client、access-tokenを取得し、それらの情報を元に認証処理を行う。
ログアウト時に、ヘッダーからuid、client、access-tokenを削除する。
Devise Token Authでは、これらの処理を自動的に行うためのヘルパーメソッドが定義されています。具体的には、以下のよう
なメソッドがあります。

authenticate_user!：認証情報を取得し、認証されたユーザーを返す。認証に失敗した場合は、エラーを返す。
current_api_v1_user：現在のログインユーザーを返す。ログインしていない場合は、nilを返す。
user_signed_in?：ログインしているかどうかを判定し、trueまたはfalseを返す。
これらのメソッドを利用することで、Devise Token Authでログイン状態を管理することができます。

------------------------------------------------------------------------------------------------
Api::V1::Auth::SessionsControllerを自作する理由は、以下のような場合です。

DeviseTokenAuthでは、ログイン状態を管理するためのセッション情報がCookieではなくヘッダーに含まれているため、ログ
イン状態の確認やユーザー情報の取得には独自の実装が必要になります。
Api::V1::Auth::SessionsControllerでは、DeviseTokenAuthが提供するヘルパーメソッドを利用して、現在のログイ
ン状態を判定したり、ログインしているユーザー情報を取得したりすることができます。
DeviseTokenAuthのデフォルトのコントローラーでも同じ対応は出来ますが、上記のような理由から、ログイン状態を管理す
るためのコントローラーを自作することが多いです。ただし、デフォルトのコントローラーでもログイン状態の確認やユーザー
情報の取得は可能です。




=end
