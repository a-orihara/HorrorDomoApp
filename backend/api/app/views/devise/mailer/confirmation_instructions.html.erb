<%# 2 %>
<p><%= t(:welcome).capitalize + ' ' + @email %>!</p>
<%# 2.1 %>
<p><%= t '.confirm_link_msg' %> </p>
<%# 2.2 %>
<p><%= link_to t('.confirm_account_link'), "#{Settings.front_domain}/mail-confirmation?confirmation_token=#{@token}", target: :_blank, rel: "noopener noreferrer" %></p>

<%#
@          @@          @@          @@          @@          @@          @@          @@          @
2
1, 2行目は公式のコードと一緒
------------------------------------------------------------------------------------------------
実際の表示:t(:welcome).capitalize + ' ' + @email
ようこそ bu.ko.ty.es.ty.mk@gmail.com!
------------------------------------------------------------------------------------------------
- `t`メソッドは、Railsの国際化（i18n）機能の一部で、翻訳ファイル内の特定のキーに対応するテキストを取得します。
- `capitalize`メソッドは、文字列の最初の文字を大文字に、残りを小文字に変換します。つまり、`t(:welcome)`で取得
されたテキストの最初の文字を大文字に変換します。日本語なので意味ない？
------------------------------------------------------------------------------------------------
. `(:welcome)`の参照先：
- `:welcome`は、翻訳ファイル内のキーです。このキーに対応する翻訳が、アプリケーションの現在の言語（ロケール）に基
づいて取得されます。

================================================================================================
2.1
実際の表示:t '.confirm_link_msg'
下記のリンクからアカウントを有効化できます:
------------------------------------------------------------------------------------------------
.t '.confirm_link_msg'`が「下記のリンクからアカウントを有効化できます:」と表示される理由：
- `t '.confirm_link_msg'`は、現在のビューのパスに基づいて、翻訳ファイル内の対応するキーを探します。この場合、
ビューは`devise/mailer`なので、`devise/mailer/confirm_link_msg`キーを探します。
- `confirm_link_msg`が`backend/api/config/locales/devise.ja.yml`に見当たらない場合、Railsは翻訳のフォ
ールバックメカニズムを使用します。これは、指定されたキーが見つからない場合、デフォルトの言語（通常は英語）や他の関
連するロケールファイルを探すことを意味します。
- したがって、「下記のリンクからアカウントを有効化できます:」と表示されるのは、別の（おそらくデフォルトの
`devise.en.yml`）または`devise` gem自体に定義されたデフォルトの翻訳が使われている可能性があります。

================================================================================================
2.2
. Settings.front_domain
backend/api/config/settings/development.ymlの環境変数。
front_domain: http://localhost:3001

------------------------------------------------------------------------------------------------
. `target: :_blank`の意味：
- `target`属性はHTMLリンクの動作を制御します。
- `:_blank`は、リンクを新しいタブまたはウィンドウで開くようにブラウザに指示します。ユーザーがメール内のリンクをク
リックしたときに、新しいタブでアカウントの確認や関連するアクションを完了できるようにするために使用されます。
------------------------------------------------------------------------------------------------
. `rel: "noopener noreferrer"`の意味：
- `rel`属性は、リンク先のページと現在のページとの関係を指定します。
- `noopener`は、新しいタブで開いたページが元のページの`window.opener`プロパティにアクセスするのを防ぎます。これ
はセキュリティ上の理由で重要です。特定の種類のクロスサイトスクリプティング攻撃（特にタブナビング）を防ぐことができま
す。
- `noreferrer`は、リンクをたどる際にHTTPリファラーを送信しないようにするもので、プライバシー保護とセキュリティ向
上に役立ちます。
------------------------------------------------------------------------------------------------
. `@token`の意味：
- `@token`は、ユーザーのアカウント確認に使用される一意のトークンです。このトークンは、ユーザーがリンクをクリックす
ることでアカウントを有効化する際に、Railsのサーバーサイドで確認されます。
- Devise Token Authの機能の一部です。Devise Token Authは、認証トークンを使用してユーザー認証を行うため、この
トークンはユーザーのアカウントを確認するための一意の識別子として機能します。

@          @@          @@          @@          @@          @@          @@          @@          @
以前のコード
@          @@          @@          @@          @@          @@          @@          @@          @
1
1.1
p Welcome %= @email %! p

<p>アカウントの有効化は、下記のリンクから行えます。:</p>
1.2
p  link_to t('.action'), confirmation_url(@resource, {confirmation_token: @token, config: message['client-config'].to_s, redirect_url: message['redirect-url']}).html_safe p
@          @@          @@          @@          @@          @@          @@          @@          @
1
rails apiモードでは、`rails generate devise:views`は不要だが、
「ArgumentError in DeviseTokenAuth::ConfirmationsController#show」
「bad argument (expected URI object or URI string)」
エラー解消のために作成。
------------------------------------------------------------------------------------------------
`rails generate devise:views`コマンドが多くのファイルを生成する理由は、このコマンドがDeviseによって使用され
るすべてのビューテンプレートをアプリケーションにコピーするためです。以下にその挙動を詳細に解説します：
a. **Deviseのビューテンプレート**:
- Deviseは、ユーザー認証に関連する様々なビューを提供します。これには、登録（サインアップ）、ログイン（サインイン）
、パスワードのリセット、アカウントの確認、アカウントのアンロックなどが含まれます。
------------------------------------------------------------------------------------------------
b. **生成されるファイルの種類**:
- `rails generate devise:views`を実行すると、上記のような様々な認証関連のビューテンプレートがアプリケーション
の`app/views/devise`ディレクトリに生成されます。
- これには、以下のようなビューテンプレートが含まれます：
  - **共通ビュー**: エラーメッセージやリンクなどの共通ビュー。
  - **確認**: アカウント確認用のビュー。
  - **パスワード**: パスワードリセット用のビュー。
  - **登録**: ユーザー登録（サインアップ）用のビュー。
  - **セッション**: ログイン（サインイン）用のビュー。
  - **アンロック**: アカウントアンロック用のビュー。
  - **メーラー**: メール送信用のテンプレート（例: 確認メール、パスワードリセットメールなど）。
------------------------------------------------------------------------------------------------
c. **カスタマイズのための生成**:
- これらのビューテンプレートは、デフォルトではDeviseのgem内にありますが、`rails generate devise:views`コマン
ドを実行することでアプリケーションにコピーされます。
- コピーされたビューテンプレートは、アプリケーションのニーズに合わせてカスタマイズすることができます。

================================================================================================
1.1
- `confirmation_instructions.html.erb` ファイルはDeviseの確認メールを生成するためのテンプレートファイルであ
り、新しいユーザーアカウントの確認メールを送信する際に使用されます。
------------------------------------------------------------------------------------------------
- `@email` はユーザーのメールアドレスを表しており、この変数はDeviseによって自動的に提供され、ユーザーがアカウン
トを作成した際のメールアドレスに関連付けられます。

================================================================================================
1.2
`link_to t('.action')`
- `link_to` はRailsのビューヘルパーで、ハイパーリンクを生成するために使用されます。
------------------------------------------------------------------------------------------------
`t`
- `t` はRailsの国際化（i18n）のためのヘルパーメソッドです。
- `t` は "translate" の略で、ローカライズされたテキストを取得するために使用されます。引数として渡された文字列を
翻訳キー（translation key）として解釈します。このキーは通常、アプリのローカライゼーションファイルに対応するテキス
トを定義するために使用されます。
------------------------------------------------------------------------------------------------
('.action')
.action`が`config/locales/devise.views.ja.yml`を参照する仕組みは、Railsの国際化（i18n）フレームワークに基
づいています。
a. **ファイル構造とスコープの関係**:
- Railsのi18nフレームワークでは、ビューのファイル構造に基づいて自動的に翻訳のスコープを決定します。
- 例えば、`devise/mailer/confirmation_instructions.html.erb`のビューでは、
`devise.mailer.confirmation_instructions`というスコープが暗黙のうちに使用されます。
b. **翻訳キーの解決方法**:
- ビューファイル内で('.action')と記述すると、Railsはこれを
`devise.mailer.confirmation_instructions.action`という完全なキーとして解釈します。
- これは、現在のビューの「相対的なパス」（ここでは`devise/mailer/confirmation_instructions`）に基づきます。
------------------------------------------------------------------------------------------------
. `confirmation_url`
- `confirmation_url`はDeviseが提供するヘルパーメソッドの一つで、ユーザーが自分のアカウントを認証（メールアドレ
スの検証など）するためのURLを生成します。
------------------------------------------------------------------------------------------------
. `@resource`
- `@resource`はDeviseで使われるインスタンス変数で、現在のユーザーの情報（またはそれに相当するオブジェクト）を保
持します。
- この変数は、Deviseのビューとコントローラー間でユーザー関連のデータをやり取りする際に使用されます。
- 例えば、`confirmation_url(@resource, ...)`という記述では、`@resource`を使って特定のユーザーの確認URLを生
成しています。ここで`@resource`は、確認メールを受け取るユーザーのインスタンスを指しています。
------------------------------------------------------------------------------------------------
{confirmation_token: @token, config: message['client-config'].to_s
**`confirmation_token: @token`**:
- `confirmation_token`は、ユーザーがメールアドレスを確認するための一意のトークンです。
- `@token`はこのトークンの実際の値を保持する変数です。
- ユーザーが`confirmation_url`をクリックすると、このトークンを使ってDeviseがユーザーのメールアドレスを確認し、
アカウントを有効化します。
. **`config: message['client-config'].to_s`**:
- `config`は追加の設定や情報を含むことができるオプションのパラメータです。
- `message['client-config']`はメールを送信する際に使用されるクライアント固有の設定を含んでいる可能性があります
- `.to_s`はこの設定を文字列に変換するために使用されます。
------------------------------------------------------------------------------------------------
`redirect_url: message['redirect-url']}).html_safe`
. **`redirect_url: message['redirect-url']`**:
- `redirect_url`は、ユーザーが確認リンクをクリックした後にリダイレクトされるURLを指定するためのオプションです。
- `message['redirect-url']`はこのリダイレクトURLの実際の値を保持します。
- このオプションを使うことで、ユーザーがメールアドレスを確認した後に特定のページに自動的にリダイレクトできます。
2. **`.html_safe`**:
- `.html_safe`はRailsのメソッドで、文字列を安全なHTMLとしてマークします。
- これにより、Railsはその文字列をHTMLとしてレンダリングする際に、エスケープ処理を行わなくなります。
- このメソッドを使用するときは、安全でないコンテンツ（例えば、ユーザー入力など）が含まれていないことを確認する必要
があります。
%>
