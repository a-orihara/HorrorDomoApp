# Be sure to restart your server when you modify this file.
# このファイルを変更した際には、必ずサーバーを再起動してください。

# Avoid CORS issues when API is called from the frontend app.
# Handle Cross-Origin Resource Sharing (CORS) in order to accept cross-origin AJAX requests.
# フロントエンドアプリからAPIを呼び出す際にCORSの問題を回避する.
# クロスオリジンのAJAXリクエストを受け付けるために、CORS(Cross-Origin Resource Sharing)を処理します。

# Read more: https://github.com/cyu/rack-cors

Rails.application.config.middleware.insert_before 0, Rack::Cors do
  # 許可されるCORSリクエストについての設定
  allow do
    origins Settings.front_domain
    # origins '*'
    # すべてのリソースに対するCORSポリシーを指定
    resource '*',
              # すべてのヘッダーを許可
              :headers => :any,
              # CORSリクエストに含まれるヘッダーの内、許可されるヘッダーを指定
              :expose => ['access-token', 'expiry', 'token-type', 'uid', 'client'],
              # 許可されるHTTPメソッドを指定
              :methods => [:get, :post, :options, :delete, :put, :show, :patch]
  end
end
# Rails.logger.info "フロントドメイン is set to: #{Settings.front_domain}"

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
- 一般的に、CORS（Cross-Origin Resource Sharing）の設定は、`config/application.rb`ではなく、
`config/initializers/cors.rb`で行う方が望ましい。
- ロード順序とわかりやすさ**： Railsのイニシャライザは、アプリケーションフレームワークとプラグインがロードされた後、
アプリケーション自体がロードされる前にロードされます。これにより、CORS設定がアプリケーションで必要になる前に適切に設
定されます。CORS専用のイニシャライザファイルを使用することで、CORS設定がどこに設定されているかが他の開発者に明確にな
り、チーム内の理解と協力が促進されます。
================================================================================================
成功したCORS操作の通常の動作を説明するには、特にプリフライトリクエストと`Access-Control-Allow-Origin`ヘッダー
に関して、すべてが意図したとおりに動作したときに何が起こるかを理解することが不可欠です。
------------------------------------------------------------------------------------------------
1. **プリフライトリクエスト:
- ウェブアプリケーションが（GET/HEAD 以外のメソッドや単純でないヘッダによって）安全でない可能性のあるクロスオリジ
ン HTTP リクエストを行うと、ブラウザはまずプリフライトリクエストを送ります。このプリフライトはクロスオリジンリソー
スをホストするサーバーに送られる HTTP OPTIONS リクエストです。これは実際のリクエストが送信しても安全かどうかをチェ
ックします。
- プリフライトリクエストは `Origin`、`Access-Control-Request-Method`、`Access-Control-Request-Headers`
のようなヘッダを含み、実際のリクエストの条件をサーバに通知します。
------------------------------------------------------------------------------------------------
2. **プリフライトに対するサーバの応答**：
- サーバーはこのプリフライトOPTIONSリクエストに対して、実際のリクエストが許可されているかどうかを示すヘッダーで応答
する。この応答で最も重要なヘッダーは `Access-Control-Allow-Origin`である。このヘッダーは、どのオリジンがリソー
スへの アクセスを許可されているかをブラウザに知らせます。Access-Control-Allow-Methods`や
`Access-Control-Allow-Headers`のような他のヘッダは、許可されるHTTPメソッドとヘッダを指定します。
------------------------------------------------------------------------------------------------
3. **Access-Control-Allow-Originヘッダー**：
- このヘッダーはCORS成功の鍵である。プリフライトと実際のリクエストの両方に対するサーバーの応答で、どのオリジンが許
可されるかを指定します。特定のオリジン(例: `https://horror-domo-app.com`)を設定することもできますし、ワイルド
カード `*` を使ってどのオリジンでも許可されることを示すこともできます。
- 許可されたオリジンにリストされていないオリジンから来た場合、サーバーはレスポンスに
`Access-Control-Allow-Origin`ヘッダーを含めない
- このヘッダー（Access-Control-Allow-Origin）がサーバーのレスポンスから欠落している場合、ブラウザーはサーバーが
オリジン間でリソースを共有する許可を与えていないと解釈します。そうして、ブラウザはリクエストを行ったJavaScriptコー
ドからレスポンスにアクセスできないようにブロックします。
- サーバーはCORSヘッダーを介してリソースへのアクセスが許可されるオリジンを指定しますが、これらのルールを実施するのは
ブラウザの責任です。
------------------------------------------------------------------------------------------------
4. **成功したCORSインタラクション**：
- ブラウザはサーバにプリフライトリクエストを送信します。
- サーバは `Origin` を許可されたオリジンリスト（例えば `cors.rb` で `origins Settings.front_domain` を使
用して設定されている）と照合する。
- オリジンが許可されている場合、サーバはリクエストのオリジンに一致する `Access-Control-Allow-Origin` を含む適
切な CORS ヘッダでプリフライトリクエストに応答します。
- プリフライトレスポンスの `Access-Control-Allow-Origin` ヘッダを見て、ブラウザは実際のリクエストを送信します。
- サーバーは実際のリクエストを処理し、このリクエストに対する応答にも `Access-Control-Allow-Origin` ヘッダーを
含めます。
- ブラウザはアプリケーションがレスポンスにアクセスすることを許可し、クロスオリジンHTTPリクエストは正常に完了します。
------------------------------------------------------------------------------------------------
. 要約
- CORSリクエストが成功するためには、サーバーは実際のリクエストを許可するヘッダーでプリフライトリクエストに応答しな
ければなりません。サーバーのレスポンスにある `Access-Control-Allow-Origin` ヘッダーは、どのオリジンがリソース
にアクセスできるかをブラウザに明示的に伝えます。このプロセスにより、ブラウザはCORSポリシーを確実に実行し、許可され
たクロスオリジンリクエストのみを許可し、潜在的に悪意のあるウェブサイトからユーザーデータを保護します。
------------------------------------------------------------------------------------------------
.参考
https://blog.kasei-san.com/entry/2021/04/28/165506
=end