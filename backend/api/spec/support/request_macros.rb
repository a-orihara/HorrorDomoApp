module RequestMacros
  def login_user(user = FactoryBot.create(:user))
    token = user.create_new_auth_token
    user.reload

    token.each do |key, value|
      headers[key] = value
    end
  end
end

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
1
module RequestMacros : RequestMacros という名前のモジュールを定義します。
------------------------------------------------------------------------------------------------
login_userメソッドを自作
(user = FactoryBot.create(:user))
FactoryBotで生成されたuserを引数に設定

------------------------------------------------------------------------------------------------
token = user.create_new_auth_token
引数として渡された user に対して、Devise Token Authでトークンを作成します。

*user.create_new_auth_tokenがここで使える理由
create_new_auth_tokenメソッドは、devise_token_auth gemによって提供されます。
UserモデルにはDeviseTokenAuth::Concerns::Userが含まれており、Userモデルにトークン認証機能を追加しています。
このConcernsを含めることで、create_new_auth_tokenメソッドがUserインスタンスで利用可能になり、ユーザー用の新し
い認証トークンを生成できるようになります。

*create_new_auth_token
ユーザーの新しい認証トークン（access-token、client、uid）セットを生成します。
これらのトークンは、その後のAPIリクエストでユーザーを認証するために使用されます。
このメソッドは、ユーザーのトークン関連属性を更新し、ユーザーレコードを保存して、新しく生成されたトークンを保存します。
これを使用して、APIリクエストに適切なヘッダーを設定することができます。


------------------------------------------------------------------------------------------------
user.reload
トークンが作成されると、ユーザーオブジェクトが更新されるため、reload メソッドでオブジェクトをリロードします。

*user.reloadはDB上のuserオブジェクトを再読み込みして、最新の状態に更新するために使用されます。
DB上のuser情報が更新されている可能性があるため、最新の情報を取得することが重要です。
例えば、ログイン後にUserオブジェクトにトークンが作成された等変更が加えられた場合、その変更がログインに反映されない
可能性があります。これを回避するために、ユーザー情報を再度読み込んで最新の情報を取得する必要があります。

*user.reloadがない場合、DB上のuser情報が更新された場合でも、変更が反映されません。
例えば、ユーザーがログインした時点で有効だったトークン情報が、ログイン後に無効化された場合、userオブジェクトが更新
されても、変更が反映されていないため、ログインに使用するトークン情報が古いままであるため、認証が通らなくなってしい
ます。

------------------------------------------------------------------------------------------------
token.each do |key, value|
トークンのヘッダー情報を取り出します。ヘッダー情報は、トークンを認証するために必要な情報を含んでいます。

*token.each はハッシュ token の各キーと値のペアに対して繰り返し処理を行います。
|key, value| はブロック引数で、各繰り返し処理において token のキーを key に、その値を value に割り当てます。
headers[key] = value は、ハッシュ headers の key というキーに value を割り当てることで、HTTPリクエストのヘ
ッダーにトークン情報を設定します。従って、ハッシュ headers は HTTPリクエストのヘッダー情報を保持していることが前
提となります。
------------------------------------------------------------------------------------------------

headers[key] = value
トークンのヘッダー情報をHTTPリクエストのヘッダーにセットします。HTTPリクエストには、セッション情報がないため、セッ
ション情報を代替するトークンが必要になります。
------------------------------------------------------------------------------------------------
=end
