# 1
module TestMacros
  # 2.1 Deviseを使用してユーザーをログインさせる。
  def login_user(user = FactoryBot.create(:user))
    # 2.2 requestオブジェクトのenv.devise.mappingにuserモデルのマッピングを設定
    @request.env['devise.mapping'] = Devise.mappings[:user]
    # 2.3 sign_inメソッドはDeviseのヘルパーメソッド。ログイン処理を行う。
    sign_in user
  end

  # 4.1 引数で指定したuserの認証用トークンを生成し、それをヘッダーに設定する
  def create_auth_token_headers(user = FactoryBot.create(:user))
    # 4.2 ユーザーの新しい認証トークン（access-token、client、uid）セットを生成
    token = user.create_new_auth_token
    # 4.3 リロードして、認証トークンをDBに保存
    user.reload
    # headerに空のハッシュを設定
    headers = {}
    # 4.4 headerハッシュに認証トークンを設定
    token.each do |key, value|
      headers[key] = value
    end
    # 戻り値はトークンを設定したheaderハッシュ
    headers
  end
end

=begin
@          @@          @@          @@          @@          @@          @@          @@          @
1
TestMacrosモジュールの作成。
config.extend TestMacros, type: :request
の設定に一致。
------------------------------------------------------------------------------------------------
spec/supportディレクトリを作成することで、RSpecの設定、共通処理、共通テストデータの作成などをまとめることができ
ます。
------------------------------------------------------------------------------------------------
このファイルがリクエストスペックや他ファイルでも使用されるのであれば、名前をrequest_macros.rbやtest_macros.rb
のように、より汎用的な名前に変更するのが良いでしょう。これにより、そのファイルがリクエストスペックでも使用できること
が明示的になります。

================================================================================================
2.1
login_userメソッドを自作
(user = FactoryBot.create(:user))
FactoryBotで生成されたuserを引数に設定

================================================================================================
2.2
. `@request.env['devise.mapping'] = Devise.mappings[:user]`
- `@request.env['devise.mapping'] = Devise.mappings[:user]`というコードは、`@request`オブジェクトの
`env`プロパティの`['devise.mapping']`キーに`Devise.mappings[:user]`を設定している。
- ここでの`env`は、HTTPリクエストに関連する環境情報を格納するハッシュマップである。
- `Devise.mappings[:user]`はDeviseによるUserモデルの設定情報を指しており、`env`の`'devise.mapping'`キー
に割り当てている。
------------------------------------------------------------------------------------------------
. この設定の意図について
- この設定の主な目的は、テスト環境においてDeviseが正しくモデル（この場合は`User`モデル）を認識し、それに応じた認
証処理を行うことを保証するためであ李、現在テストしているコンテキスト（UserモデルやAdminモデルなど）をDeviseに知
らせることにある。
- Deviseはマルチモデル認証をサポートしており、異なるモデル（例えば`User`, `Admin`など）に対して異なる認証ロジッ
クを適用する必要がある。`Devise.mappings[:user]`を設定することで、Deviseに現在テストしているのが`User`モデル
であることを伝え、適切な認証処理を実行させる。
- このような設定をすることで、テスト中にDeviseの認証メソッド（例えば`sign_in`）を使用する際に、期待通りの動作を
確実に行うことができる。
------------------------------------------------------------------------------------------------
. `@request`について
- `@request`はRailsのテストで使われるオブジェクトで、HTTPリクエストを模倣するために使用される。
- テスト中に`@request`オブジェクトを使って、特定のHTTPリクエストの状況を設定することができる。例えば、セッション
情報やパラメータ、ヘッダなどを設定できる。
- 具体例: ユーザーがログインしている状態をテストする場合、`@request`オブジェクトにセッション情報を設定して、その
ユーザーがログインした状態を模倣することができる。
------------------------------------------------------------------------------------------------
. `@request.env['devise.mapping']`
- `@request.env['devise.mapping']`はDeviseの内部で使用される設定で、Deviseがどのモデル（例えばUserやAdmin）
と関連付けられているかを指定する。指定することで、Deviseはそれぞれのモデルに適した認証処理を行う。
- この設定によって、Deviseは適切なルートやヘルパーメソッドを知ることができ、ユーザー認証の処理を正しく行う。
------------------------------------------------------------------------------------------------
. `Devise.mappings[:user]`について
- `Devise.mappings[:user]`はDeviseのマッピング情報を参照するためのメソッド。
- Deviseは複数のモデル（例えばUser, Admin）に対応できるよう設計されており、`Devise.mappings`はこれらのモデル
ごとの設定情報を保持している。
- `[:user]`の部分で、特定のモデル（この場合は`User`モデル）に関連する設定を取得する。
- このマッピング情報は、Deviseがそのモデルに対して認証関連の操作を行う際に使用される。
------------------------------------------------------------------------------------------------
Deviseのマッピング情報は、対象モデルに対する認証機能、利用するモジュール、コントローラー、ルート、ビューなどの設定
を管理する。
Devise.mappings[:user]を使うことで、Userモデルに対するDeviseの設定を取得し、テスト環境を適切に構築する。

================================================================================================
2.3
. `sign_in user`について
- `sign_in`はDeviseが提供するヘルパーメソッドの一つで、指定されたユーザーでログインするために使用される。
- このメソッドはテスト環境で特に有用で、ログインが必要なテストケースでユーザーをプログラム的にログインさせることが
できる。
- 引数に指定された`user`（この場合は`FactoryBot.create(:user)`で作成されたユーザーインスタンス）としてログイ
ンする。
- `sign_in`メソッドを呼び出すことで、その後のテストケース内でそのユーザーがログイン状態になる。

================================================================================================
4.1
request_login_userメソッドを自作
(user = FactoryBot.create(:user))
FactoryBotで生成されたuserを引数に設定

================================================================================================
4.2
token = user.create_new_auth_token
引数として渡された user に対して、Devise Token Authでトークンを作成します。
------------------------------------------------------------------------------------------------
*user.create_new_auth_tokenがここで使える理由
create_new_auth_tokenメソッドは、devise_token_auth gemによって提供されます。
UserモデルにはDeviseTokenAuth::Concerns::Userが含まれており、Userモデルにトークン認証機能を追加しています。
このConcernsを含めることで、create_new_auth_tokenメソッドがUserインスタンスで利用可能になり、ユーザー用の新し
い認証トークンを生成できるようになります。
------------------------------------------------------------------------------------------------
*create_new_auth_token
ユーザーの新しい認証トークン（access-token、client、uid）セットを生成します。
これらのトークンは、その後のAPIリクエストでユーザーを認証するために使用されます。
このメソッドは、ユーザーのトークン関連属性を更新し、ユーザーレコードを保存して、新しく生成されたトークンを保存します。
これを使用して、APIリクエストに適切なヘッダーを設定することができます。

================================================================================================
4.3
user.reload
トークンが作成されると、ユーザーオブジェクトが更新されるため、reload メソッドでオブジェクトをリロードします。
------------------------------------------------------------------------------------------------
- `user.reload`はデータベース上の`user`オブジェクトを再読み込みし、最新の状態に更新するために使用される。これは、
`user`オブジェクトに加えられた変更（例えば、新しいトークンの生成）を反映させるために重要である。`reload`がなけれ
ば、データベースに加えられた変更がメモリ上の`user`オブジェクトに反映されない。
- DBはテスト用のデータベースを指す。テスト実行時、Railsはテスト用のデータベースと対話し、そのデータベースに保存さ
れたデータに基づいて操作を行う。`user.reload`はこのテスト用データベースに保存された最新の`user`情報を取得するた
めに使われる。

================================================================================================
4.4
token.each do |key, value|
トークンのヘッダー情報を取り出します。ヘッダー情報は、トークンを認証するために必要な情報を含んでいます。
------------------------------------------------------------------------------------------------
*token.each はハッシュ token の各キーと値のペアに対して繰り返し処理を行います。
|key, value| はブロック引数で、各繰り返し処理において token のキーを key に、その値を value に割り当てます。
headers[key] = value は、ハッシュ headers の key というキーに value を割り当てることで、HTTPリクエストのヘ
ッダーにトークン情報を設定します。従って、ハッシュ headers は HTTPリクエストのヘッダー情報を保持していることが前
提となります。
------------------------------------------------------------------------------------------------
headers[key] = value
トークンのヘッダー情報をHTTPリクエストのヘッダーにセットします。HTTPリクエストには、セッション情報がないため、セッ
ション情報を代替するトークンが必要になります。
------------------------------------------------------------------------------------------------
- 具体的なtokenの中身は、以下のような形式になる：
- `access-token`: 認証に使用されるトークンの値。
- `client`: トークンが発行されたクライアントの識別子。
- `uid`: ユーザーのユニークな識別子、通常はメールアドレス。
- これらの値は、APIリクエストを送る際のHTTPヘッダーにセットされ、サーバー側でユーザーの認証に使用される。
`headers[key] = value`の行で、これらのトークン情報をHTTPリクエストのヘッダーに設定している。これにより、セッシ
ョン情報がないAPIリクエストにおいて、ユーザーの認証情報を提供することができる。
=end
