# 1  FROM nginx:1.22.1-alpine
FROM nginx:alpine

# 2
RUN rm -f /etc/nginx/conf.d/*

# ローカルのビルドコンテキスト内のNginxの設定ファイル:nginx.confをコンテナに新たにファイルを作成してコピー
# アプリごとの設定ファイルは「/etc/nginx/conf.d/」の下に新規で作成し、
# Nginx全体に関わる設定は「/etc/nginx/nginx.conf」を編集するようにします。
# 今回はアプリ単体の設定なので「/etc/nginx/conf.d/api-app.conf」を作成します。
# 3
ADD nginx.conf /etc/nginx/conf.d/api-app.conf

# 4 ビルド完了後にNginxを起動
CMD /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/nginx.conf



# ./container/nginx/default.conf:/etc/nginx/conf.d/default.conf

# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# . `FROM nginx:alpine`
# - `nginx:alpine`は、Nginx WebサーバーがプリインストールされたAlpine LinuxベースのDockerイメージ。
# - Alpineは軽量なLinuxディストリビューション。
# - `FROM nginx:1.22.1-alpine` 1.22.1バージョンを指定。ないと最新のバージョンを取得

# ================================================================================================
# 2
# . `RUN rm -f /etc/nginx/conf.d/*` :
# - このコマンドは、Nginxの設定ファイルが格納されている`/etc/nginx/conf.d/`ディレクトリ内の全ファイルを削除。
# - 理由は、デフォルトの設定を一掃し、カスタム設定だけを使いたいため。
# - `rm -f`は強制削除なので、エラーを出さずに削除が行われる。
# - インクルード用のディレクトリ内を削除(一旦デフォで作成されているconf.dディレクトリ以下のサンプルファイルを削除)
# - nginxをインストールすると、/etc配下にnginx/nginx.confやnginx/conf.dというディレクトリが生成される

# ================================================================================================
# 3
# . `ADD nginx.conf /etc/nginx/conf.d/api-app.conf`
# - ローカルの`nginx.conf` ファイルをDockerコンテナの `/etc/nginx/conf.d/api-app.conf` へ追加。
# ------------------------------------------------------------------------------------------------
# nginx.confが一番初めに読み込まれる。nginx.confがnginx/conf.d以下を読み込む。
# conf.dディレクトリにバーチャルサーバ毎の設定ファイルを置くことにより、その設定ファイルが読み込まれます。

# ================================================================================================
# 4
# . `CMD /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/nginx.conf`
# -  nginxを前面で実行し、コンテナが停止しないようにする。
# -  `-g 'daemon off;'` でnginxをデーモンとしてではなく前面で実行。 `-c /etc/nginx/nginx.conf` で設定ファ
# イルを指定。
# -  Dockerコンテナは前面で動作するプロセスが終了すると停止します。そのため、nginxを前面で動作させる必要があります。
# dockerではコマンドをforegroundで動かさないとコンテナが停止してしまいます。 nginxはデフォルトはデーモンとして動く
# ので、['daemon off;']でforegroundで動くように設定。

# ================================================================================================
# nginxの設定ファイルについて
# ------------------------------------------------------------------------------------------------
# Nginxの設定ファイルは、コンテキスト（Context）とディレクティブ（Directive）という2つの主要な要素を使用してサー
# バーの動作を設定します。以下にそれぞれの要素の説明をします。
# ------------------------------------------------------------------------------------------------
# 一番外側がmainコンテキスト。その中にディレクティブを書く。
# 各ディレクティブの中にあるのが、そのディレクティブのコンテキストという構成
# ------------------------------------------------------------------------------------------------
# **コンテキスト（Context）**:
# コンテキストは、設定ファイル内の特定のセクションを指します。Nginxの設定ファイルは階層構造を持ち、異なるコンテキスト
# 内で異なる設定が行われます。設定ファイルの各コンテキストは、特定のタスクや設定グループに関連する設定を含みます。一般
# 的なコンテキストには以下のようなものがあります：
# - `events`: イベント駆動の設定を行うコンテキスト。プロセスの動作や接続の扱いに関する設定を含みます。
# - `http`: HTTPサーバー全体の設定を行うコンテキスト。サーバー全体で共通の設定を指定します。
# - `server`: 個別のHTTPサーバーの設定を行うコンテキスト。ドメインやポートごとの設定を含みます。
# - `location`: 特定のURLパスに対する設定を行うコンテキスト。リクエストのURIに基づく設定を指定します。
# ------------------------------------------------------------------------------------------------
# **ディレクティブ（Directive）**:
# ディレクティブは、設定ファイル内で使用されるコマンドや設定の指示です。ディレクティブはコンテキスト内で使用され、特定
# の設定や動作を指定します。設定ファイルのディレクティブは、コンテキストに応じて異なる効果を持ちます。いくつかの一般的
# なディレクティブには以下のようなものがあります：
# - `listen`: サーバーが受け付けるポートを指定します。
# - `server_name`: ドメイン名を指定して、特定のサーバーブロックを識別します。
# - `location`: 特定のURLパスに対する設定を指定します。
# - `proxy_pass`: リバースプロキシとして動作する際に、バックエンドのサーバーを指定します。
# ------------------------------------------------------------------------------------------------
# ディレクティブはその効果を持つコンテキスト内で使用されるため、正しいコンテキスト内でディレクティブを配置することが重
# 要です。設定ファイルのディレクティブはコマンドラインのように一つずつ実行するのではなく、設定全体を定義するためのもの
# です。
# ------------------------------------------------------------------------------------------------
# 総括すると、Nginxの設定ファイルはコンテキストとディレクティブを組み合わせて、サーバーの動作や設定を制御します。コン
# テキストは設定の階層構造を形成し、ディレクティブは特定の設定を指定します。
