# 1.1
FROM nginx:latest

# 1.2 ヘルスチェック用
RUN apt-get update && apt-get install -y curl vim sudo lsof

# 2
RUN rm -f /etc/nginx/conf.d/*

# 3
ADD /nginx.conf /etc/nginx/api-app.conf

# 4 ビルド完了後にNginxを起動
CMD /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/api-app.conf

EXPOSE 80
# @          @@          @@          @@          @@          @@          @@          @@          @
# 1

# * - なぜ apk --no-cache?
# - no-cache` オプションを使うと、ローカルキャッシュなしでパッケージをインストー ルできるので、イメージが軽くなる。
# ================================================================================================
# 1.1
# . apt-get update
# - UbuntuやDebian系のLinuxディストリビューションで使用されるパッケージ管理コマンド。システムのパッケージマネージ
# ャのパッケージリストを更新。具体的には、設定されているリポジトリから最新のパッケージ情報を取得して、利用可能なパッケ
# ージとそのバージョンのリストを更新する。これにより、システムにインストールできるパッケージの最新情報が確保される。
# ------------------------------------------------------------------------------------------------
# - apt-get install -yコマンドは、特定のパッケージをインストールするために使用される。-yオプションは、インストール
# プロセス中にユーザーによる確認を求めるプロンプトが表示された場合に、自動的にyesと答える。これにより、スクリプトや自
# 動化されたセットアッププロセス中に、ユーザーの介入なしでパッケージがインストールされる。
# - curl、vim、sudo、lsofをインストールしている。
# - curl`： URLを使ってデータを転送するためのコマンドラインツールとライブラリ。様々なプロトコルをサポートしており、
# ファイルのダウンロードやAPIの呼び出しなど、ネットワーク関連の作業に便利。
# - vim`： 効率的なテキスト編集を可能にするために作られた、高度に設定可能なテキストエディタ。ほとんどの UNIX システ
# ムで配布されている vi エディタの改良版である。
# - sudo`： システム管理者がユーザーに制限された root 権限を与え、root での活動を記録できるように設計されたプログ
# ラム。sudo' という名前は "superuser do" の略である。
# - lsof`： 開いているファイルの一覧」を意味するコマンドで、開いているすべてのファイルとそれを開いたプロセスの一覧を
# 報告するのに使われる。問題の診断やリソースの管理に役立つ。
# ------------------------------------------------------------------------------------------------
# . ヘルスチェックにおける "lsof "の役割
# - lsof**： lsof**は "List Open Files "の略で、どのファイルがどのプロセスで開かれているかを知るために使われる。
# - 期待される動作： このケースでは、`lsof`はヘルスチェックに使われ、特定のファイルやポートが アプリケーションに
# よって使われていることを確認するために使われる。これは、サービスが期待通りに動作しているかどうかを確認したりするのに
# 役立つ。
# - 用途:典型的には、ヘルスチェックとして動作するスクリプトで使用され、現在使用されているファイルまたはポートをリスト
# し、期待されるファイルまたはポートが開かれているかどうかに基づいてステータスコードで終了する。

# ================================================================================================
# 2
# . `RUN rm -f /etc/nginx/conf.d/*` :
# - /etc/nginxディレクトリは、nginxの設定ファイルやディレクトリが置かれる。
# - このコマンドは、Nginxの設定ファイルが格納されている`/etc/nginx/conf.d/`ディレクトリ内の全ファイルを削除。
# - 理由は、デフォルトの設定を一掃し、カスタム設定だけを使いたいため。
# - `rm -f`は強制削除なので、エラーを出さずに削除が行われる。
# - インクルード用のディレクトリ内を削除(一旦デフォで作成されているconf.dディレクトリ以下のサンプルファイルを削除)
# - nginxをインストールすると、/etc配下にnginx/nginx.confやnginx/conf.dというディレクトリが生成される
# ------------------------------------------------------------------------------------------------
# - これを行う主な理由は、Nginxの設定をまっさらな状態から始めるためです。Nginxサーバをセットアップするとき、特に
# Dockerコンテナ内では、使用したい設定ファイルがあることがよくあります。このディレクトリを一掃することで、後から追加
# した設定（カスタム`nginx.conf`など）のみがNginxによって使用されるようになります。これにより、Nginxイメージに付属
# していたり、Dockerfileの前のステップで追加された設定ファイルの残りによるコンフリクトや予期せぬ動作を避けることがで
# きます。

# ================================================================================================
# 3
# 修正前
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# . `ADD nginx.conf /etc/nginx/conf.d/api-app.conf`
# - ローカルの`nginx.conf` ファイルをDockerコンテナの `/etc/nginx/conf.d/api-app.conf` へ追加。
# ------------------------------------------------------------------------------------------------
# nginxを起動すると、masterプロセスを使って、nginx.confが一番初めに読み込まれる。nginx.confがnginx/conf.d以下
# を読み込む。
# conf.dディレクトリにバーチャルサーバ毎の設定ファイルを置くことにより、その設定ファイルが読み込まれます。
# ------------------------------------------------------------------------------------------------
# アプリごとの設定ファイルは「/etc/nginx/conf.d/」の下に新規で作成し、Nginx全体に関わる設定は
# 「/etc/nginx/nginx.conf」を編集するようにします。
# 今回はアプリ単体の設定なので「/etc/nginx/conf.d/api-app.conf」を作成します。
# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
# 修正後
# ADD /nginx.conf /etc/nginx/api-app.conf
# ------------------------------------------------------------------------------------------------
# - **違い**：
# - /etc/nginx/nginx.conf`はNginxのデフォルトの設定ファイルです。
# - etc/nginx/myapp.conf` はカスタム設定ファイルです。
# - **理由**： カスタムコンフィギュレーションファイル（`myapp.conf`）を使用して、デフォルトの設定を上書きまたは拡
# 張したい場合があります。これはアプリケーション固有の設定を分離するのに便利です。
# ------------------------------------------------------------------------------------------------
# `-c /etc/nginx/myapp.conf` の意図
# - 意図**：
# - c /etc/nginx/myapp.conf`フラグはデフォルトの設定ファイル(`nginx.conf`)ではなく、カスタム設定ファイル
# (`myapp.conf`)を使用するようにNginxに指示します。
# - **理由**： これによりNginxの設定をよりコントロールできるようになり、アプリケーション固有の設定を管理しやすくな
# ります。また、デフォルトの `nginx.conf` が更新されても、カスタム設定が上書きされないようにします。
# ------------------------------------------------------------------------------------------------
# - 使用目的**：
# - カスタム構成**： これを行う主な理由は、Nginxイメージに付属するデフォルト設定の代わりに、特定のアプリケーションの
# ニーズに合わせたカスタムNginx設定を使用するためです。
# - デプロイの簡素化**： 設定ファイルをイメージに直接追加することで、コンテナ起動後に手動で設定する必要がなく、このイ
# メージから起動されるすべてのコンテナが自動的に正しいNginx設定を持つようになります。
# - 一貫性**： このアプローチは、異なる環境やデプロイメント間で一貫性を維持するのに役立ちます。なぜなら、同じDocker
# イメージをどこでも使用することができ、アプリケーションが適切に動作するために必要な正確な設定が含まれているからです。

# ================================================================================================

# 4
# . `CMD /usr/sbin/nginx -g 'daemon off;' -c /etc/nginx/nginx.conf`
# ------------------------------------------------------------------------------------------------
# - CMD`**： コマンドのこの部分は、コンテナの起動時に実行するコマンドをDockerに指示します。
# - **`/usr/sbin/nginx`**： コンテナ内のNginx実行ファイルへのパスです。どのアプリを開くかをコンピュータに指示。
# Nginxはこの実行ファイルを使用して起動します。別にnginxだけでもいい。これはフルパス指定。どちらを使用するかは、状況
# や好みによります。フルパスを使用することで、どの実行ファイルを指しているのかが明確になり、誤って異なるバージョンを使
# 用するリスクを減らせます。
# - g 'daemon off;'`**： 通常、Nginxはバックグラウンドで（デーモンのように）実行されますが、DockerではDockerコ
# ンテナが終了しないようにフォアグラウンドで実行し続けたいものです。g 'daemon off;'`を追加すると、Nginxのデフォル
# トの動作がフォアグラウンドで実行されるように変更され、Dockerフレンドリーな動作になります。これは "バックグラウンド
# で実行する "から "このアプリを画面上に表示し続ける "に設定を変更するようなものです。
# - **-c /etc/nginx/api-app.conf`**： この部分はNginxが起動するときに使用する設定ファイルを指定します。デフォ
# ルトの設定ファイルは`api-app.conf`に置き換えられ、アプリケーションのニーズに合わせたカスタム設定ファイルになる。
# ------------------------------------------------------------------------------------------------
# - 要するにこのコマンドは、Dockerコンテナが起動するときに、指定した特定の設定ファイルを使用して、フォアグラウンドで
# 実行されたままNginxも起動するようにするために使用します。メインのプロセス（この場合はNginx）がバックグラウンドで実
# 行されたり停止したりすると、Dockerはコンテナの仕事が終わったと考えてシャットダウンしてしまうため、これはDockerに
# とって非常に重要です。カスタム設定でNginxをフォアグラウンドで実行することで、Webサーバはコンテナが実行する限り稼働
# し続けます。
# http://18.181.79.250/backend/api/v1/health_check