version: "3.8"

# services=コンテナ
services:
  db:
    # イメージの指定
    image: mysql:8.0
    # コンテナ名の指定
    container_name: mysql-ctr-prod
    # 2
    command: --default-authentication-plugin=mysql_native_password
    # 3 同期する
    volumes:
      - db-data-prod:/var/lib/mysql
    # 4
    env_file:
      - ./backend/api/.env
    # ローカル3316とコンテナ3306を接続。3306をdevで使用の為
    ports:
      - "3316:3306"

  api:
    # docker build:Dockerfileと指定したコンテキスト（ビルドコンテキスト）からDockerイメージを構築。
    build:
      # 7
      context: ./backend/api/
      dockerfile: Dockerfile
    # imageとbuildが同時に宣言されている場合, ビルドが優先的に実行されて,
    # imageはその構成に使われる(imageによるプルは発生しない).結果image名を設定する事になる。
    image: rails-img-prod
    # コンテナ名の指定
    container_name: rails-ctr-prod
    env_file:
      - ./backend/api/.env
    # 9
    # 5
    command: bash -c "rm -f tmp/pids/server.pid && mkdir -p tmp/sockets && mkdir -p tmp/pids && bundle exec puma -e production -C config/puma.rb"

    # 8
    volumes:
      - ./backend/api:/api-app
      - public-data-prod:/api-app/public
      - tmp-data-prod:/api-app/tmp
      - log-data-prod:/api-app/log

    # 依存関係の指定（railsはDBと接続する際は、DBのIPアドレスを指定する為）。
    depends_on:
      - db
    ports:
      - "3002:3000"
    # -itのiの設定。stdin=標準入力をオープン。
    stdin_open: true
    # -itのt=tty
    tty: true

  web:
    build:
      # ./backend/web/内のDockerfileを使う
      context: ./backend/web/
    image: nginx_img
    container_name: nginx-ctr-prod
    # 8.1
    volumes:
      - public-data-prod:/api-app/public
      - tmp-data-prod:/api-app/tmp
    # ローカル80とコンテナ80を接続
    ports:
      - 80:80
    # apiの次にweb(nginx)が立ち上がる
    depends_on:
      - api
      - front

  front:
    build:
      context: ./frontend/front
      dockerfile: Dockerfile.prod
    image: nextjs-img-prod
    container_name: nextjs-ctr-prod
    ports:
      - "3003:3000"
    depends_on:
      - api

volumes:
  public-data-prod:
  tmp-data-prod:
  log-data-prod:
  db-data-prod:
# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# docker-composeはコンテナと周辺環境、ネットワークやボリュームを作成する
# dockerfileはイメージをつくるので、ネットワークやボリュームを作れない
# docker-composeには、コンテナの操作、すなわちdocker runやbuildのオプションの内容を書いていく

# ================================================================================================
# 2
# command:起動時の既定のコマンドを上書きする(docker-composeで指定するcommandはDockerfileよりも優先される).
# mysql:8.0で外部のソフトウェアからmysqlへ接続する認証方式が変わり、セキュリティが強化された。
# 対応していないソフトウェアが多い為、認証方式を古いものに変更する

# ================================================================================================
# 3
# データの永続化。ymlファイルはリストの場合は-を付けて記載する。
# マウント：コンテナからホスト(ローカルPC)のファイルに、まるでコンテナ内にそのファイルがあるかのようにアクセスする。
# （↑dockerの支配下に置く）
# ------------------------------------------------------------------------------------------------
# ボリュームマウント：Docker Engineが管理している領域内にボリュームを作成し、ディスクとしてコンテナにマウントする。
# 名前だけで管理できるので、手軽に使える反面、直接操作しづらいので、「仮で使いたい場合」や、「滅多に触らないが、
# 消してはいけないファイル」を置く事に使う事が多い。
# バインドマウント：PC側のDocker Engineが管理していない場所の、既存のディレクトリにあるファイルにマウントする。
# 直接ディレクトリに対してファイルを操作出来るので、頻繁に触りたいファイルはここに置く。
# - db-data(ボリューム名):/var/lib/mysql:ボリュームマウント
# ------------------------------------------------------------------------------------------------
# マウントで指定したファイルがコンテナにない場合、ファイルも合わせて作る。
# コンテナはなるべく小さくしたいので、通常データやコードはホストからマウントする。
# ボリュームとは記憶領域の事。ホストの記憶領域にコンテナをマウントする。
# ただし、マウントは記憶領域以外にディレクトリやファイル、メモリの場合もある。
# ホストの./db/mysql_dataにdockerコンテキスト内の/var/lib/mysqlとマウント。
# コンテナを削除すると、その中にあるDBのデータも一緒に消える為、DBをローカルにマウントしておく。
# mysqlのデータは、/var/lib/mysqlに保管されている。
# dbーdata:dockerのvolumes。volumesはDockerのコンテナ内で作成したデータを永続化するための場所。
# volumesはホスト内の/var/lib/docker/volumes/に作られるが、
# Docker環境はHyperKitというVM(バーチャルマシン)上で実行されているため、Macからは参照できない。
# dockerのvolumesは、他のコンテナ同士でデータを共有したい場合に使う。
# その他、dockerファイルでmkdirで作ったディレクトリは、特に指定しないとroot権限で作られる。

# ================================================================================================
# 4
# Docker Composeファイルのenv_file:設定は、環境変数をファイルからコンテナに渡すために使用されます。指定されたフ
# ァイルに記述された環境変数は、Dockerコンテナの実行時に読み込まれ、それらの変数がコンテナ内で利用可能になります。
# ------------------------------------------------------------------------------------------------
# 環境変数の指定（初期設定値）。環境変数はコンテナ間で使う。
# 外部ファイルから複数の環境変数をサービスコンテナー受け渡すには env_fileオプションを利用。
# ------------------------------------------------------------------------------------------------
# ↓.envファイルの内容の説明
# MYSQL_ROOT_PASSWORD
# この変数はMySQL作成に必須のもので、MySQLにおけるスーパーユーザである、rootアカウントに設定するパスワードを指定し
# ます。
# ------------------------------------------------------------------------------------------------
# MYSQL_DATABASE
# この変数はオプションで、イメージの起動時に作成するデータベースの名前を指定します。
# もしユーザ名とパスワードが指定された場合（下記を参照）は、
# ユーザーはこのデータベースへのスーパーユーザアクセス権（GRANT ALLに相当）を与えられます。
# ------------------------------------------------------------------------------------------------
# MYSQL_USER, MYSQL_PASSWORD
# これらの変数はオプションで、新規ユーザの作成とそのユーザのパスワード設定に使用されます。
# このユーザはMYSQL_DATABASE変数で指定されたデータベースに対して、スーパーユーザとしての権限（上記を参照）を与えら
# れます。
# どちらの変数も、作成されるユーザのためには必須です。
# この仕組みを、rootユーザの作成に使う必要はないことに注意してください。
# rootユーザはデフォルトで作成され、MYSQL_ROOT_PASSWORD変数により指定されたパスワードが設定されるためです。
# ------------------------------------------------------------------------------------------------
# MYSQL_ALLOW_EMPTY_PASSWORD
# オプションの変数です。
# yesを設定することで、rootユーザに空のパスワードを設定してコンテナを起動することを許可します。
# 注意:
# この変数にyesを設定することはおすすめしません。
# この設定は誰もがスーパーユーザの権限を得ることを許しMySQLインスタンスがまったく保護されていない状態になるためです。

# ================================================================================================
# 5
# ↓nginxなしの場合。
# command: bash -c "rm -f tmp/pids/server.pid && rails s -e production -p 3000 -b '0.0.0.0'"
# ------------------------------------------------------------------------------------------------
# rails s:puma(アプリケーションサーバ)が起動。「-C」でPumaの設定ファイルを指定することが可能。
# ------------------------------------------------------------------------------------------------
# env_fileで本番環境を設定しているので書かなくてもいいが、明示的に[-e production]を記載。
# ------------------------------------------------------------------------------------------------
# コマンド全体は、RailsアプリケーションのPumaサーバーを起動するためのものです。
# 具体的には、tmp/pids/server.pid ファイルを削除し、tmp/sockets ディレクトリと tmp/pids ディレクトリを作成し
# た後、Pumaをproduction環境で、指定された設定ファイル (config/puma.rb) を使用して実行します。
# ------------------------------------------------------------------------------------------------
# . `bash -c`
# - `bash`はUnixシェルの一つ。
# - `-c`オプションで指定されたコマンドを文字列として実行。
# ------------------------------------------------------------------------------------------------
# . `rm -f tmp/pids/server.pid`の意味と意図
# - `rm`: ファイル削除コマンド。
# - `-f`: エラーメッセージを出さずに強制削除。
# - `tmp/pids/server.pid`: RailsサーバのプロセスIDが記録されるファイル。
# - 意図: サーバが異常終了した際に残る`server.pid`を削除。
# ------------------------------------------------------------------------------------------------
# . `rm -f tmp/pids/server.pid`の必要性
# - 異常終了した場合、`server.pid`が残り新たにサーバを起動できなくなる可能性がある。それを防ぐ。
# ------------------------------------------------------------------------------------------------
# . `-p 3000 -b '0.0.0.0'`の意味と意図
# - `-p 3000`: ポート3000でRailsサーバを起動。
# - `-b '0.0.0.0'`: 任意のIPアドレスからの接続を許可。
# - 意図: ローカルネットワークやDockerコンテナからアクセス可能にする。
# ------------------------------------------------------------------------------------------------
# . `-p 3000 -b '0.0.0.0'`の必要性
# - ポートとバインドアドレスを指定しないとデフォルト値が適用されるが、Docker環境や外部からのアクセスでは不便な場合が多い。
# ------------------------------------------------------------------------------------------------
# 「-p」オプションをつけることで「mkdir path/to/dir」のような復数階層のディレクトリを1回で作成することが
# できる。
# ------------------------------------------------------------------------------------------------
# デフォルトの設定ファイルを指定
# $ puma -C config/puma.rb
# -C, --config PATH: 指定した設定ファイル読み込み
# 例：ファイル指定した場合
# bundle exec puma -e production -C config/puma/production.rb"
# ------------------------------------------------------------------------------------------------
# `mkdir -p tmp/sockets && mkdir -p tmp/pids`のコマンドを打つ代わりに、下記をDockerfileに記載しておくのでも
# 良い。
# RUN mkdir -p tmp/sockets
# RUN mkdir -p tmp/pids
# `# command: bash -c "rm -f tmp/pids/server.pid && bundle exec puma -e production -C config/puma.rb"`
# ------------------------------------------------------------------------------------------------
# ↓productionモードではディレクトリ内にconfig/master.keyとconfig/credentials.ymlというファイルが必要。
# ------------------------------------------------------------------------------------------------
# Pumaではデフォルトの設定ファイルであるconfig/puma.rbのほか、実行環境に応じたconfig/puma/[実行環境].rbという
# 設定ファイルを用意できます。
# rails sの場合はconfig/puma/[環境名].rb → config/puma.rbの優先順位で設定ファイルを読み込みます。
# Railsアプリケーションのデフォルトの実行環境はdevelopmentなので、rails sで起動すればconfig/puma/development.rb →
# config/puma.rbの順で設定ファイルの有無を確認します。そして、ファイルが存在すれば設定を読み込みます。
# 一方、rails s -e productionもしくはENV[RAILS_ENV] = productionの実行環境でrails sを起動すればconfig/puma/
# production.rb → config/puma.rbの順で設定ファイルの有無を確認します。
# ------------------------------------------------------------------------------------------------
# 仮想環境内の仮想マシン(docker)、もしくは別の物理PCで立ち上がっているRailsアプリケーションを、
# 仮想環境の外のブラウザで見るためには、ポートをフォーワーディング（転送）する必要があります。
# [ポートフォワーディング:ポートからポートへデータを転送する。]
# ------------------------------------------------------------------------------------------------
# Railsのプロセス（実行中のプログラム、処理）は、外部からのリクエストを受け付けるために、
# Railsプロセスが動いているホスト(dockerコンテナ)が持っているipアドレスに、結び付けられています。
# その結び付けられているアドレスをバインディングアドレスといいます。
# 以前は、デフォルトで、ipアドレス0.0.0.0に結び付けられていましたが、
# 一時期から開発環境では、127.0.0.1(localhostのループバックアドレス）に結び付けられるようになりました。
# ------------------------------------------------------------------------------------------------
# [ループバックアドレス:使っているPCそのものを表すipアドレスであり、
# 127.0.0.1というipアドレスが一般的には割り当てられています。]
# ------------------------------------------------------------------------------------------------
# そして、このipアドレスのホスト名として、localhostという名前が割り当てられています。
# そのため、http://localhost:3000 として、ブラウザで開いていたところを、
# http127.0.0.1:3000として開いてみても同じように開くことができると思います。
# そして、このループバックアドレスというのは、外部から（今回の場合は仮想環境の外から）はアクセスすることができません。
# 内部からのみアクセスすることができます。
# ipアドレス0.0.0.0の意味:前提として、マシンというのは複数のネットワークインターフェースを持っています。
# つまりは複数のipアドレスを持っているということです。そして、ipアドレス0.0.0.0は、
# そのipアドレス全てを表しています。
# -bオプションというのは、Railsのプロセスをどのipアドレスにバインドするかというものです。
# rails s -b 0.0.0.0というコマンドはRailsのプロセスをipアドレス0.0.0.0だけではなく、
# 仮想マシンが持っている全てのipアドレスにバインディングしているという意味です。
# そのため、外部からアクセスできない、127.0.0.1だけではなく、
# 外部からアクセスできる他のipアドレス（192.168.??.??）などにもバインディングされているため、
# 仮想マシン内からだけではなく仮想マシンの外からもアクセスできます。
# まとめ
# ・ipアドレス127.0.0.1(localhost)は仮想環境外部からはアクセスできない。
# ・仮想マシンは複数のネットワークインターフェースを持っており、ipアドレス127.0.0.1以外は外部からアクセスできる。
# ・開発環境では、rails sとすると、railsプロセスはlocalhost(127.0.0.1)にバインディングされる。
# ・-b 0.0.0.0というオプションをつけると、仮想マシンが持っている全てのネットワークインターフェースにバインディングされるため、仮想環境外部からアクセスできる。

# ================================================================================================
# 6
# デフォルトの設定(config/puma.rb)でpumaが起動。オプション-C: 設定ファイル読み込み
# puma.sockを配置するディレクトリを作成
# tmpディレクトリは一時的に使うファイルやディレクトリを保存するディレクトリ
# tmpディレクトリの中にあるファイルやディレクトリはパソコンを再起動すると消える
# /myapp/tmp/socketsディレクトリの作成
# -p:復数階層のディレクトリを1回で作成
# productionモードではディレクトリ内にconfig/master.keyとconfig/credentials.ymlというファイルが必要。

# ================================================================================================
# 7
#  Dockerfile と「 コンテクストcontext 」から Docker イメージを構築するコマンドです。
#  構築のコンテクストとは、指定した パス や URL に置かれているファイル全てです。※（apiディレクトリ以下）
#  構築の過程で、そのコンテクストにある全てのファイルを参照できます。
#  たとえば、 COPY 命令を使う時に、コンテクスト内にあるファイルを参照して構築できます。
# context: ./api/:ビルドコンテキストを、apiディレクトリ以下に設定（dockerデーモンに送信）。
# ビルドコンテキストというのは、dockerに「ここにあるファイルを全部読み込んでくれ！」を指定するもの。
# 例えば、.と指定すると、カレントディレクトリにあるファイルすべてがdockerデーモンに送信される。
# ただし、送信される（参照出来るようになる）からと言って、イメージにそのままファイルが組み込まれるわけではない。
# 例えば、カレントディレクトリに1GBの動画ファイルを置いておくと、dockerはそれを読み込むが、
# ADDやCOPY命令をしない限り、イメージに動画ファイルが組み込まれることはないので、
# 1GBの動画ファイルを読み込むのに使った時間はムダになる。
# なので、ビルドコンテキストには不要なファイルは置くべきでない。buildするのにムダに時間がかかってしまうため。

# ================================================================================================
# 8
# ホストの./backend/apiにコンテナのルート直下の/api-appをマウント。
# ホストで同期した/apiが変更されると,コンテナの/apiも自動的に変更される。
# 誰がどのPCのどのディレクトリで起動してもいいように、カレントディレクトリを指定する場合もある。
# これはバインドマウント：ホストの既存のディレクトリやファイルを使用。
# 頻繁に書き換えるファイルはバインドマウントの方がいい。

# ================================================================================================
# 8.1
# . Nginxで特に設定する理由
# - Nginxは通常、静的なリソースを効率よく配信するために使用されます。このリソースはAPIコンテナと共有する必要がある場
# 合があります。
# - Nginxコンテナは、静的ファイルの提供やリバースプロキシとして動作するために必要です。`public-data-prod` ボリュ
# ームは、コンテナ内の `/api-app/public` ディレクトリとホストの間でデータを共有するために使用されます。同様に、
# `tmp-data-prod` ボリュームは一時的なデータやソケットなどの保存に使用されます。
# ------------------------------------------------------------------------------------------------
# - `public-data-prod:/api-app/public`
# - Railsの`public`ディレクトリとNginxで使用する`/api-app/public`をマッピング。
# - 理由: 静的ファイル（CSS, JS, 画像など）を効率よく配信するため。
# ------------------------------------------------------------------------------------------------
# - `tmp-data-prod:/api-app/tmp`
# - Railsの`tmp`ディレクトリとNginxで使用する`/api-app/tmp`をマッピング。
# - 理由: 一時ファイルやキャッシュを共有するため。

# ================================================================================================
# 9
# backend/api/.envで設定したので、下記記述は削除。削除前の説明は下記に記載。
# environment:
#       RAILS_ENV: production
# ------------------------------------------------------------------------------------------------
# - `environment:` セクションは、Dockerコンテナ内で使用される環境変数を定義するためのものです。
# - コンテナ内部のプロセスやアプリケーションは、これらの環境変数を参照して動作や設定を調整することができます。
# ------------------------------------------------------------------------------------------------
# . `environment:` で、なぜ `RAILS_ENV: production` を設定できる？**
# - `RAILS_ENV: production` の設定は、Railsアプリケーションの実行環境を「本番環境」に設定するためです。
# - `RAILS_ENV: production` を設定することで、Railsアプリケーションは本番環境用の設定や振る舞いを適用します。
# - `environment:` セクション内の `RAILS_ENV: production` 設定は、Dockerコンテナ内で実行されるRailsアプリケ
# ーションを本番環境として動作させるために用意されています。
# ------------------------------------------------------------------------------------------------
# - `env_file` と `environment:` の設定の違い
# - `env_file` は外部のファイルから環境変数を読み込むための設定です。指定されたファイルに記述された環境変数がコンテ
# ナ内にロードされます。
# - `environment:` は直接Docker Composeファイル内で環境変数を定義するためのセクションです。
# - `env_file` と `environment:` を両方指定する場合、基本的には `environment:` で定義された環境変数が 、
# `env_file` で読み込まれるファイルの内容を上書きします。
# - ただし、同じ環境変数が両方の場所で異なる値で設定されている場合、`environment:` の設定が優先されます。
# - したがって、設定の衝突を避けるためには、両方の設定で同じ環境変数が同じ値で設定されるように注意する必要があります。

