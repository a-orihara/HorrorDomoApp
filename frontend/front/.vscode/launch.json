// 1
{
  // デバッグ設定のバージョン
  "version": "0.2.0",
  // 2 デバッグ設定の配列を定義
  "configurations": [
    {
      // 3 デバッグ設定の名前を定義
      "name": "Next.js: debug server-side",
      // デバッグのタイプを定義。nodeやchromeなどが指定できる。
      // node-terminal" は Node.js アプリケーションをデバッグするための設定
      // ↓に変更"type": "node-terminal",
      "type": "node",
      //  デバッグリクエストの種類を定義
      // "launch" は、デバッグプロセスを起動するためのリクエスト
      // "request": "launch",
      "request": "attach"
      // Node.js アプリケーションを実行するコマンド
      // *dockerで立ち上げるので不要
      // "command": "npm run dev"
    },
    {
      // 4 クライアントサイドのデバッグ設定
      "name": "Next.js: debug client-side",
      "type": "pwa-chrome",
      "request": "launch",
      // デバッグするブラウザの URL を定義
      "url": "http://localhost:3000"
    },
    {
      // *名前に「full stack」とあるため、サーバーサイドとクライアントサイドの両方のデバッグ設定。
      "name": "Next.js: debug full stack",
      "type": "node-terminal",
      "request": "launch",
      "command": "npm run dev",
      // デバッグ時に使用するターミナルを定義
      // "integratedTerminal" を指定すると VS Code が用意するターミナルを使用
      "console": "integratedTerminal",
      // サーバーが起動したときに行うアクションを定義
      "serverReadyAction": {
        "pattern": "started server on .+, url: (https?://.+)",
        "uriFormat": "%s",
        "action": "debugWithChrome"
      }
    }
  ]
}

/*
@          @@          @@          @@          @@          @@          @@          @@          @
1
.vscodeディレクトリは、Visual Studio Codeでの開発に関連する設定ファイルが格納されるディレクトリです。Next.js
でvscodeを使用して、設定が必要な場合に作成します。
Next.jsでデバッグを行う場合、サーバーサイドとクライアントサイドの両方のコードをデバッグするように設定します。
一方だけを設定した場合、デバッグの途中でエラーや問題が発生する可能性があります。これは、Next.jsの場合、サーバーサ
イドとクライアントサイドのコードが混在しているためです。したがって、両方のコードをデバッグすることが重要です。

launch.jsonファイルは、Visual Studio Codeでのデバッグの設定ファイルです。このファイルによって、どのようにデ
バッグするかやデバッグ対象のアプリケーションの情報を設定することができます。具体的には、デバッグ対象のアプリケーシ
ョンの起動コマンドや引数、ポート番号、デバッグモードの設定、またはブレークポイントの設定などが含まれます。
Next.js の場合、サーバーサイド、クライアントサイドの両方のデバッグを行うために使用されます。

================================================================================================
2
各設定はお互いに影響し合わないため、心配する必要はありません。configurations 配列内の各設定は個別のデバッグセッ
ションとして機能します。VS Code でデバッグを開始するとき、選択したデバッグ設定だけが実行されます。他の設定は無視
され、実行されません。

------------------------------------------------------------------------------------------------
このコードは、Next.js アプリケーションのサーバーサイドとクライアントサイドの両方をデバッグできるようにするための
設定を提供しています。具体的には、以下の3つのデバッグ設定が想定されています。

"Next.js: debug server-side" - サーバーサイドのコードをデバッグします。Node.js 環境で実行されるコードに対
してブレークポイントを設定してデバッグできます。

"Next.js: debug client-side" - クライアントサイドのコードをデバッグします。ブラウザで実行されるコードに対
してブレークポイントを設定してデバッグできます。Chrome ブラウザが使用されます。

"Next.js: debug full stack" - サーバーサイドとクライアントサイドの両方のコードをデバッグできるようにします
。サーバーサイドのコードをデバッグするための設定と、サーバーが起動したら自動的にクライアントサイドのコードをデバ
ッグするための設定が含まれています。

================================================================================================
3
*サーバーサイドのデバッグ設定

"type"に"node"
直接Node.jsアプリケーションを実行し、デバッグプロセスを起動します。"
"type"に"node-terminal"
ターミナルを使用してNode.jsアプリケーションを実行し、デバッグプロセスを起動します。

------------------------------------------------------------------------------------------------
"type"に"node"を設定する理由
"type": "node-terminal" と "type": "node" の違いは、デバッグプロセスを起動する方法です。"node-terminal"
は、ターミナルを使用してNode.jsアプリケーションを実行し、デバッグプロセスを起動します。一方、"node"は、直接
Node.jsアプリケーションを実行し、デバッグプロセスを起動します。
一般的にDocker上でNode.jsを実行する場合、ホストとは別の仮想環境で動作するため、リモートデバッグが必要になる場合
があります。そのため、"type": "node"を使用することで、Docker上で動作するNode.jsアプリケーションに対して、ロ
ーカルのデバッグ環境からアタッチしてデバッグを行うことができます。また、Docker上のNode.jsアプリケーションをホ
スト上のエディタから直接起動してデバッグを行う場合もありますが、その場合は"type": "node"を使用することが一般的
です。
一方、"type": "node-terminal"を使用する場合は、デバッグプロセスを起動するためにターミナルを開く必要がありま
す。Docker上で動作するNode.jsアプリケーションをデバッグする場合、コンテナ内のシェルにアクセスしてターミナルを
開く必要があり、手間がかかる場合があります。そのため、"type": "node"を使用することが推奨されます。
またDocker で Next.js アプリケーションを実行する場合、アプリケーションは Docker コンテナ内で実行されます。その
ため、"node-terminal" ではなく "node" を使用して、VSCode がリモートの Node.js プロセス（Docker コンテナ内）
にアタッチできるようにする必要があります。

"type"に"node-terminal"を設定する理由
Next.jsがNode.jsをベースとしているため、サーバーサイドコードをデバッグする際には、Node.jsアプリケーションをデバ
ッグするための設定を利用する必要があるからです。よく見られる設定の一つです。これを利用することで、VS Codeが提供す
るデバッグ機能を使用して、Node.jsアプリケーションをデバッグできるようになります。

------------------------------------------------------------------------------------------------
"request": "attach"
デバッガが既存のプロセスに接続することを指定します。これは、プロセスが既に実行されていてデバッガをアタッチする必要
がある場合に使用されます。この設定は、リモート環境（Docker コンテナなど）で実行されているプロセスに対してデバッグ
を実行する場合に役立ちます。

"request": "launch",
VS Codeがデバッグプロセスを起動するために必要なリクエストを送信するための設定。
request: launchとattachの２つが選択できる。launchは、デバッグ時にプログラムを起動すること。attachとは、既に
起動しているプログラムに対し、後からデバッガーを取り付けること。

"request": "launch" が "request": "attach" になる理由
Docker を使用している場合、アプリケーションはすでに Docker コンテナ内で実行されているため、"launch" ではなく
"attach" を使用して既存の Node.js プロセスに接続します。"launch" は新しいプロセスを起動し、"attach" は既存
のプロセスに接続します。
------------------------------------------------------------------------------------------------
"command": "npm run dev"
"npm run dev"コマンドは、Next.jsプロジェクトを開発モードで起動するためのコマンド。
Next.jsプロジェクトを開発モードで起動し、サーバーサイドのコードを実行するための設定です。デバッグ時には、開発モー
ドでアプリケーションを実行することが一般的であり、"npm run dev"コマンドで開発モードで起動するために使用されます。

================================================================================================
4
"type": "pwa-chrome"
Google Chrome を使用してクライアントサイドの JavaScript をデバッグするための一般的な設定です。これは、VSCode
の "Debugger for Chrome" 拡張機能を使用して、Chrome ブラウザでデバッグを行うことができます。
*/
