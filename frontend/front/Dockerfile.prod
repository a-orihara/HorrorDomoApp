# 7

# 依存パッケージ(各種ライブラリ)のインストール
# 2 alpine:Linuxのディストリビューション。軽量なAlpine上でNodeJSのv16系を動かす。
FROM node:16-alpine AS deps
# 3
RUN apk add --no-cache libc6-compat
WORKDIR /usr/src/front
# packeg.jsonとpackage-lock.jsonのみコピーする
COPY package*.json ./
# 4 本番用のnode_modulesを作成
RUN npm ci

# Build環境
FROM node:16-alpine AS builder
WORKDIR /usr/src/front
# deps ステージ上に生成されたnode_modulesディレクトリを builder ステージ上にコピー。
COPY --from=deps /usr/src/front/node_modules ./node_modules
# ローカルのfrontディレクトリをWORKDIRへコピー。
# ローカルのnode_modulesは.dockerignoreに記載があるのでコピーされない。
COPY . .
ENV NEXT_TELEMETRY_DISABLED 1
# npm run build:.nextフォルダが作成。.nextフォルダに本番アプリケーションがビルドされる。
RUN npm run build

# 実行環境
# runner ステージでは最終的なイメージに含めたいものだけの抽出を行ないます。
FROM node:16-alpine AS runner
WORKDIR /usr/src/front
# node.jsの本番環境
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
# publicディレクトリにはアイコン等の公開ファイルが入っています。
COPY --from=builder /usr/src/front/next.config.js ./
COPY --from=builder /usr/src/front/.next ./.next
COPY --from=builder /usr/src/front/public ./public
COPY --from=builder /usr/src/front/package.json ./package.json
COPY --from=deps /usr/src/front/node_modules ./node_modules
# 6
# COPY --from=builder --chown=nextjs:nodejs /usr/src/front/.next/standalone ./
# COPY --from=builder --chown=nextjs:nodejs /usr/src/front//.next/static ./.next/static
# 不要なものが取り除かれたnode_modulesをプロダクションにコピーする
CMD [ "npm", "start" ]

# @          @@          @@          @@          @@          @@          @@          @@          @
# 1
# アプリケーションの依存パッケージのインストール、build環境と,実行環境を分離して、実行環境には最終的な成果物だけを配置することによりimageサイズ
# の縮小を図ります。

# 「2番目のステージで、1番目のステージで生成したものの中から必要なものだけコピーして、あとは放置」
# マルチステージビルドを行うには、Dockerfile 内にFROM行を複数記述します。 各FROM命令のベースイメージは、それ
# ぞれに異なるものとなり、各命令から新しいビルドステージが開始されます。 イメージ内に生成された内容を選び出して、
# 一方から他方にコピーすることができます。 そして最終イメージに含めたくない内容は、放っておくことができます。

# =          ==          ==          ==          ==          ==          ==          ==          =
# 2
# デフォルトではステージに名前はつきません。 そこでステージを参照するには、ステージを表わす整数値を用います。
# この整数値は、最初のFROM命令を 0 として順次割り振られるものです。 ただしFROM命令にAS <NAME>の構文を加えれば、
# ステージに名前をつけることができます。

# マルチステージビルドの利用にあたって、ステージのコピーは Dockerfile 内での直前のステージだけに限定されるもの
# ではありません。 COPY --from命令では別のイメージからコピーすることができます。 その際にはローカルや Docker
# レジストリ上のイメージ名、タグ名、あるいはタグ ID を指定します。 Docker クライアントは必要なときにはイメージ
# を取得します。 そしてそこから構築内容をコピーします。
# e.g:[COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf]

# =          ==          ==          ==          ==          ==          ==          ==          =
# 3
# apk:Alpine Linuxで使用できる、パッケージ管理コマンド。aptみたいなもの。
# apk add:インストールする。
# --no-cache:キャッシュを削除。

# -          --          --          --          --          --          --          --          -
# Alpine LinuxベースでDockerイメージを作るとき、 apk add でパッケージインストールする前に apk update
# しないといけない。これは次のように一行で書ける。
# apk --update add
# ただ、これは /var/cache/apk/ にキャッシュを生成する(.tar.gz 形式のファイル)。
# 続いてDockerイメージは可能な限り小さくしたいので、キャッシュを削除する為、
# rm -rf /var/cache/apk/*
# するところを、--no-cache オプションを使うことで、キャッシュを削除してくれる。
# apk --no-cache add

# libc6-compat:ライブラリパッケージ
# よくある問題として、process.dlopen を使用するために必要な共有ライブラリが不足していることがあります。足りな
# い共有ライブラリをイメージに追加するには、Dockerfile に libc6-compat パッケージを追加することが推奨されます。

# =          ==          ==          ==          ==          ==          ==          ==          =
# 4
# yarn --frozen-lockfileと同じ意味
# npm ci は下記の動作をします
# node_modules ディレクトリ（パッケージが入っている場所）の削除
# package-lock.json と package.json の整合性のチェック
# package-lock.json から node_modules を再現
# *npm ciはnpm installと同様に依存パッケージをダウンロードします。npm installとの違いはpackage-lock.jsonの
# 更新をしないことで、これによって開発時とプロダクション時のコードの差がなくなります。
# *通常のnpm installは、その時点で改めてpackage.jsonの記載からインストールする。その時、アップデートが必要なも
# のがあった場合、アップデートしてしまうので、開発時とパッケージのバージョンが変わる可能性がある。それを防ぐ。

# --only=production オプションでプロダクション環境では不要なdevDependenciesなパッケージを削除しimageサイズ
# を抑えることができます。

# =          ==          ==          ==          ==          ==          ==          ==          =
# 5
# 開発時は npm run dev で自動ビルドまでセットになった開発サーバーを起動しましたが、リリース用にはnpm run build
# で明示的にビルドし、その内容を npm start の本番サーバーでホスティングします。

# =          ==          ==          ==          ==          ==          ==          ==          =
# 6
# standalone機能

# Next.jsは、node_modulesにあるファイルを含む、デプロイに必要なファイルのみをコピーするスタンドアロンフォルダを自
# 動的に作成することができます。
# このモードが有効になった状態でビルドすると、.nextディレクトリ下にstandaloneフォルダが作成されます。このフォルダ
# の下には、node_modulesから、使用するファイルのみがコピーされ、さらにnext startコマンドの代わりに使用できる最小
# 限のserver.jsファイルが生成されます。要するに、自動的にstandaloneフォルダが作成され、その中に動作に必要な最小限
# のファイル群がコピーされるという便利な機能です。この機能によってビルドサイズを削減できます。


# =          ==          ==          ==          ==          ==          ==          ==          =
# 7

# 基本的な流れ
# package.jsonとpackage-lock.jsonを含めて全てコピー
# npm ciで、 node_modules ディレクトリの削除、package-lock.json と package.json の整合性のチェック
# package-lock.json から node_modules を再現
# npm build
# npm start

# -          --          --          --          --          --          --          --          -
# 第一段階
# FROM node:16-alpine
# WORKDIR /usr/src/front
# COPY . .
# RUN npm install
# RUN npm run build
# EXPOSE 8080
# CMD [ "npm", "start" ]

# -          --          --          --          --          --          --          --          -
# 第二段階

# # 依存パッケージのインストール
# FROM node:16-alpine deps
# WORKDIR /usr/src/front
# # packeg.jsonとpackage-lock.jsonのみコピーする
# COPY package*.json ./
# RUN npm ci --only=production

# # Build環境
# FROM node:16-alpine as builder
# WORKDIR /usr/src/front
# COPY . .
# # depsステージでインストールしたパッケージをコピーする
# RUN npm ci
# RUN npm run build

# # 実行環境
# FROM node:16-alpine
# WORKDIR /usr/src/front
# ENV NODE_ENV production
# # ファビコンが格納されたディレクトリをコピーする
# COPY --from=builder /app/public ./public
# # buildによって.next配下に生成されたhtml、JSON、JSファイルをコピーする
# COPY --from=builder /app/.next ./.next
# COPY --from=builder /app/package.json ./package.json
# EXPOSE 8080
# CMD [ "npm", "start" ]

# -          --          --          --          --          --          --          --          -
# 通常、Next.js の Docker Image を作成する場合は下記ファイルが必要となります
# ビルド成果物
# /.next/
# スタティックファイル
# /public/
# 依存パッケージ
# /node_modules/
# 設定ファイル
# /next.config.js