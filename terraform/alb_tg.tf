# ================================================================================================
# ALB_TG "aws_lb_target_group"
# ================================================================================================
# 1 alb_tg
resource "aws_lb_target_group" "alb_tg" {
  # 1.1
  deregistration_delay = "300"
  # 1.2
  load_balancing_algorithm_type = "round_robin"
  # ターゲットグループ（ALBのトラフィックを転送する先）の名前を指定
  name = "portfolio-alb-tg"
  # ターゲットグループが受け入れるトラフィックのポートを指定
  port = 80
  # ターゲットグループが使用するプロトコルを指定
  protocol = "HTTP"
  # ターゲットグループが使用するプロトコルのバージョンを指定
  protocol_version = "HTTP1"
  # 新しいターゲットがトラフィックの対象となる際に、徐々にトラフィックを増やすための遅延時間
  slow_start = 0
  tags       = {}
  tags_all   = {}
  # 1.3
  target_type = "ip"
  # ターゲットグループが属するVPCのIDを指定
  vpc_id = aws_vpc.vpc.id
  # 1.4 ロードバランサーがターゲットの健康状態を監視するための設定
  health_check {
    # ヘルスチェックが有効か無効かを指定
    enabled = true
    # ターゲットが正常であると見なされるまでの連続した正常な応答の回数を指定
    healthy_threshold = 5
    # ヘルスチェックを実行する間隔（秒単位）を指定
    interval = 300
    # ヘルスチェックの応答と比較するステータスコードを指定
    matcher = "200"
    # 1.5 nginxへのヘルスチェックリクエストのパスを指定
    path = "/api/v1/health_check"
    # ヘルスチェックの対象となるポートを指定。 "traffic-port":ALBのトラフィックポートを使用。
    port = "traffic-port"
    # ヘルスチェックに使用するプロトコルを指定
    protocol = "HTTP"
    # ターゲットへのヘルスチェックリクエストのタイムアウト時間（秒単位）を指定
    timeout = 5
    # ターゲットが異常であると見なされるまでの連続した異常な応答の回数
    unhealthy_threshold = 2
  }
  # 1.6 スティッキーセッション（スティッキーセッションCookie）の設定
  stickiness {
    # スティッキーセッションCookieの有効期間を秒単位で指定
    cookie_duration = 86400
    #  スティッキーセッションが有効か無効かを指定。falseは無効です。
    enabled = false
    # スティッキーセッションのタイプを指定
    type = "lb_cookie"
  }
}

# ------------------------------------------------------------------------------------------------
# frontend_alb_tg
resource "aws_lb_target_group" "frontend_alb_tg" {
  deregistration_delay          = "300"
  load_balancing_algorithm_type = "round_robin"
  name                          = "portfolio-frontend-alb-tg"
  port                          = 80
  protocol                      = "HTTP"
  protocol_version              = "HTTP1"
  slow_start                    = 0
  tags                          = {}
  tags_all                      = {}
  target_type                   = "ip"
  vpc_id                        = aws_vpc.vpc.id
  health_check {
    enabled           = true
    healthy_threshold = 5
    interval          = 300
    matcher           = "200"
    # 3.1
    path                = "/api/health_check"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    unhealthy_threshold = 2
  }
  stickiness {
    cookie_duration = 86400
    enabled         = false
    type            = "lb_cookie"
  }
}

# ================================================================================================
# ALB_TG "aws_lb_target_group_attachment"
# ================================================================================================
# 2
# resource "aws_lb_target_group_attachment" "alb_tg_att" {
# }

/*
@          @@          @@          @@          @@          @@          @@          @@          @
1
terraform importのコマンド
terraform import aws_lb_target_group.NAME TARGET_GROUP_ARN

================================================================================================
1.1
. `deregistration_delay = "300"`:
- `deregistration_delay`は、ターゲットがアウトオブサービス（ターゲットが正常に応答しない）状態から削除されるま
での遅延時間を指定します。ここではターゲット（例: Webサーバー、アプリケーションサーバーなど）が正常に応答しない300
秒（5分）後にターゲットが削除されることを意味します。

================================================================================================
1.2
. `load_balancing_algorithm_type = "round_robin"`:
- この設定はALBのターゲットグループで使用されるロードバランシングアルゴリズムのタイプを指定します。
- "round_robin"は、トラフィックを順番に各ターゲットに分散するアルゴリズムです。各要求は順番にターゲットに送信され
、負荷が均等に分散されます。

================================================================================================
1.3
- target_type = "ip":
target_typeは、ターゲットグループに登録されるターゲットのタイプを指定します。
ターゲットタイプ"ip"は、ターゲットとしてIPアドレスを使用することを示します。つまり、このターゲットグループに登録さ
れるターゲットは、IPアドレスを持つサーバーなどのホストであることを意味します。このターゲットタイプは、通常のターゲ
ットグループで使用され、HTTPやTCPなどのプロトコルで通信する際にIPアドレスを指定します。

================================================================================================
1.4
. `health_check`:
- `health_check`は、ロードバランサーがターゲットの健康状態を監視するための設定です。健康チェックは、ターゲットが
正常に応答しているかどうかを確認し、応答しない場合にターゲットをアウトオブサービスにするのに役立ちます。
- `enabled`フィールドは、健康チェックが有効か無効かを示します。ここでは`true`に設定されており、健康チェックが有
効になっています。
- 他のフィールドには、健康チェックの詳細な設定が含まれています。たとえば、`healthy_threshold`は健康と見なすため
に必要な成功した応答の回数、`interval`は健康チェックの実行間隔、`matcher`は正常な応答を示すステータスコード（こ
こでは200）、`path`は健康チェックを実行するエンドポイントのパスなどが含まれます。
------------------------------------------------------------------------------------------------
. **ECSとALBにおけるヘルスチェックの目的**：
- ECS ヘルス・チェック**： ECSコンテナのヘルスチェックは、ECSサービス内の個々のタスクの健全性を監視するために使用
される。コンテナがヘルスチェックに失敗した場合、ECSはサービス管理の一環としてタスクを停止し、新しいタスクを開始する
ことができます。
- ALBヘルスチェック**： ALBヘルスチェックは、ECSサービスがロードバランサーを介して正しく応答していることを確認する
ために使用されるという点で異なります。これはALBによるトラフィック管理に役立ち、ECSタスクの健全なインスタンスにのみト
ラフィックをルーティングすることを保証する。これは、クライアントリクエストからECSタスクまでのフルパスが健全で、応答
性があることを保証することである。

================================================================================================
1.5
. **ALB ヘルスチェック**： デフォルトでは、ターゲットグループのターゲットのリスニングポート、この場合はポート80で
リスニングしているNginxコンテナに向けられる。
------------------------------------------------------------------------------------------------
. **Nginxの構成**： ポート80をリッスンするように設定されているNginxがリクエストを受信します。nginx.conf`による
と、すべての受信トラフィックを処理するロケーションブロック（location /）があり、最初に静的ファイルを提供しようとし
ますが、ファイルが見つからない場合は@api-app（Railsアプリケーションへのリクエストをプロキシするように設定された名
前付きロケーションブロック）にリクエストを転送します。
------------------------------------------------------------------------------------------------
. **Railsアプリへのプロキシパッシング**： nginx.conf`の@api-appロケーションブロックは、Pumaサーバー（Railsア
プリ）がリッスンしているUnixソケットにリクエストをプロキシするように設定されています。proxy_pass http://api-app;`
ディレクティブはリクエストを上流の `api-app` ブロックに転送するよう Nginx に指示します。このブロックは
`unix:///api-app/tmp/sockets/puma.sock` を介して Puma サーバーに接続されています。ここでRailsアプリがリク
エストを処理します。
------------------------------------------------------------------------------------------------
. **Railsアプリケーションのレスポンス**： Pumaで動作するRailsアプリケーションは、`puma.rb`設定ファイルで定義さ
れたUnixソケットパスをリッスンします。Nginx からヘルスチェックリクエストを受信すると、`HealthCheckController`
を通してリクエストを処理し、正常に機能していれば 200 OK ステータスで応答する。
------------------------------------------------------------------------------------------------
. **ALB はレスポンスを受信する： ALBはNginx経由でRailsアプリケーションからのレスポンスを受信し、正常な200 OKレ
スポンスに基づいて、サービスが正常であると判断します。
------------------------------------------------------------------------------------------------
. このセットアップでは、ALBがネットワークアドレスをチェックしているのではなく、NginxがPumaへのUnixソケット接続を
介してRailsアプリケーションに正しく転送するように設定されているパスをチェックしているため、ヘルスチェックのパスに
`localhost`は必要ありません。

================================================================================================
1.6
- `stickiness`:
- `stickiness`は、セッションの粘着性を制御するための設定です。セッション粘着性は、同じクライアントが同じターゲッ
トに対して連続してリクエストを送信することを確保するために使用されます。
- `enabled`フィールドは、セッション粘着性が有効か無効かを示します。ここでは`false`に設定されており、セッション粘
着性は無効になっています。
- `cookie_duration`は、セッションクッキーの有効期間を設定します。セッション粘着性が有効である場合、クライアント
にクッキーが設定され、一定の期間内に同じターゲットにリクエストが送信されるようになります。有効期間は秒単位で指定され
ます。

================================================================================================
2
resource "aws_lb_target_group_attachment"は、importできない。
------------------------------------------------------------------------------------------------
`aws_lb_target_group_attachment` は、AWSのターゲットグループ（Target Group）に対するターゲットのアタッチメ
ントを設定するTerraformのリソースです。ターゲットグループにターゲット（例えばEC2インスタンスやECSのコンテナ）を関
連付けるために使用されます。
------------------------------------------------------------------------------------------------
ecsサービスのload_balancer>target_group_arn で設定した場合、aws_lb_target_group_attachmentは不要。
- ECS サービスはターゲットグループとの統合が組み込まれています。したがって、ECS サービスの `load_balancer` ブ
ロック内で `target_group_arn` を指定することにより、ECS タスクが自動的に対応するターゲットグループに登録（また
は登録解除）されます。
- `aws_lb_target_group_attachment` は、ターゲット（例: EC2 インスタンス）を ALB/NLB のターゲットグループ
に手動でアタッチするためのリソースです。
- ECS サービスを使用する場合、ECS サービスがタスクのライフサイクルを管理するため、手動でターゲットをターゲットグ
ループにアタッチする必要はありません。
- したがって、ECS サービスとターゲットグループを使用している場合、`aws_lb_target_group_attachment` は不要で
す。

================================================================================================
3.1
. **frontend_alb_tg` の `/api/health_check` の理由**：
- frontend_alb_tg`のヘルスチェック設定が `/api/health_check` を指しているのは、Next.jsアプリでヘルスチェッ
クリクエストに応答するために設定されているパスだからです。フロントエンドアプリとその上で動作しているサーバーが健全で
あることを確認するために、フロントエンド用に別のヘルスチェックエンドポイントを持つのが一般的です。
- `frontend/front/src/pages/api/health_check.ts`ここへアクセス
- frontend_alb_tg` のヘルスチェック設定にある `"/api/health_check"` パスは、ALBがこのエンドポイントを呼び出
すと、Next.jsアプリがトラフィックを受け入れられることを示す200 OKレスポンスが返ってくることを期待します。
*/