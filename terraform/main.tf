

# 3
# resource "aws_instance" "hello-world" {
#   # ami           = "ami-0ce107ae7af2e92b5"
#   ami           = "ami-0fd8f5842685ca887"
#   instance_type = "t2.micro"
#   # EC2の"Name"というキーに"HelloWorld"という値のタグが設定されています。
#   tags = {
#     Name = "HelloWorld"
#   }
# }

# ---------------------------------------------
# Terraform configuration
# ---------------------------------------------
# terraformブロック：Terraformの構成と要件を指定
terraform {
  # 1.1
  required_version = ">=1.1.3"
  required_providers {
    aws = {
      # 1.2
      source = "hashicorp/aws"
      # 1.3
      version = "~> 3.0"
    }
  }
}

# ---------------------------------------------
# Provider
# ---------------------------------------------
# 2
provider "aws" {
  # 2.1 jsonとは違い、:ではなく、基本的に=でつなぐ
  profile = "portfolio-terraform-aws-profile"
  region  = "ap-northeast-1"
}

# ---------------------------------------------
# Variables
# ---------------------------------------------
# 3
variable "project" {
  type = string
}

variable "environment" {
  type = string
}


/*
@          @@          @@          @@          @@          @@          @@          @@          @
HCL2構文
terraform apply
デフォルトでカレントディレクトリ内の全ての.tfファイルを読み込む。サブディレクトリ内の.tfファイルは読み込まない
================================================================================================
1

================================================================================================
1.1
`required_version = ">=1.1.3"`
2022年1月現在のterraformの最新は1.1.3。
Terraformのバージョン要件を指定しています。
- `required_version`: これはTerraformの最小バージョンを指定するフィールドです。">=" は「以上」という意味で、
"1.1.3" は指定された最小バージョンを示しています。つまり、この設定ではTerraformのバージョン1.1.3以上が必要です。
もし1.1.3未満のバージョンを使用しようとすると、エラーが発生します。

================================================================================================
1.2
source: このフィールドは、Terraformが使用するプロバイダーのソースを示しています。"hashicorp/aws" は、
Terraformの公式プロバイダーであるAWSプロバイダーを指定しています。

================================================================================================
1.3
2022年1月現在のAWSプロバイダのバージョンは3.x。
version = "~> 3.0" は、Terraformが使用するAWSプロバイダーのバージョンをセマンティック バージョニングの範囲指
定で「3.0以上、4.0未満」という意味です。つまり、この設定では3.0から3.9までのバージョンが許容され、4.0以上のバージ
ョンは許容されません。

================================================================================================
2
- [provider]この部分をHCL2ではブロックタイプと呼ぶ。
- providerブロック:Terraformに、特定のクラウドプロバイダ（AWS、Azure、GCPなど）やサービスと通信する方法を指示する
設定です。
例：`provider "aws"` は、TerraformにAWSとのインタラクションを行うための設定を提供します。

================================================================================================
2.1
- `profileプロパティ` :AWS CLI認証情報を指定します。AWS CLIのprofile名を入力する。

================================================================================================
3
- `variable` ブロック: `variable` ブロックは、Terraformで使用する変数を宣言するために使用されます。変数はイ
ンフラの構成でパラメータ化された値を表し、設定ファイルから値を受け取ることができます。
- `variable "environment"`: この行は `variable` ブロックを開始し、"environment" という名前の変数を宣言し
ています。この変数は文字列型 (`type = string`) であることが指定されています。

================================================================================================
4
`resource` ブロックは、Terraformの設定ファイル内で使用される重要なブロックで、特定のリソース（ここではAWSインス
タンス）を定義します。以下は提供されたコード内の `resource "aws_instance" "hello-world"` ブロックの意味です
------------------------------------------------------------------------------------------------
- `resource "aws_instance" "hello-world"` の部分で、`aws_instance` と `hello-world` という二つの引数
が設定されています。
- HCL2では、引数の部分をラベルと呼ぶ。
- リソースタイプとリソース名は、そのリソースを一意に識別するために使用されます。この組み合わせは、同一のTerraform
設定内で一意でなければなりません。
------------------------------------------------------------------------------------------------
- `"aws_instance"` はリソースのタイプを指定しており、ここではAWS EC2インスタンスを作成するためのリソースを示し
ています。
------------------------------------------------------------------------------------------------
- `"hello-world"` はリソースの名前（エイリアス）で、後でこの名前を使用してリソースを参照します。この名前を使って
、Terraform設定内でこの特定のリソースを参照できます。

================================================================================================
- **terraform.tfstate**:
- これはTerraformの状態ファイルです。Terraformが管理するインフラストラクチャの現在の状態を保存しています。
- このファイルは、`terraform apply` や `terraform destroy` などのコマンドが実行された後に更新されます。
- 通常、このファイルは機密情報を含む可能性があるため、バージョン管理システムにはコミットしないことが推奨されてい
ます。
------------------------------------------------------------------------------------------------
- **terraform.tfstate.backup**:
- これは、最後に `terraform.tfstate` ファイルが更新された際のバックアップです。
- `terraform.tfstate` ファイルが何らかの理由で破損または失われた場合、このバックアップファイルから状態を復元
することができます。
------------------------------------------------------------------------------------------------
- なぜ２つのファイルが存在するのか:
- `terraform.tfstate` ファイルは非常に重要な情報を持っているため、何らかのエラーでデータが失われた場合に備え
てバックアップが自動的に作成されます。
------------------------------------------------------------------------------------------------
状態の復元が必要な場合以外で、`.backup` ファイルを直接編集または使用することは一般的にはありません。主な状態管理は
`terraform.tfstate` ファイルを通して行われます。
*/
